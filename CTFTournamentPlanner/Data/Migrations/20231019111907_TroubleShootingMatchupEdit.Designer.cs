// <auto-generated />
using System;
using CTFTournamentPlanner.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CTFTournamentPlanner.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20231019111907_TroubleShootingMatchupEdit")]
    partial class TroubleShootingMatchupEdit
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BracketTeam", b =>
                {
                    b.Property<int>("BracketsId")
                        .HasColumnType("int");

                    b.Property<int>("TeamsId")
                        .HasColumnType("int");

                    b.HasKey("BracketsId", "TeamsId");

                    b.HasIndex("TeamsId");

                    b.ToTable("BracketTeam");
                });

            modelBuilder.Entity("CTFTournamentPlanner.Models.Bracket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsGenerated")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Brackets");
                });

            modelBuilder.Entity("CTFTournamentPlanner.Models.Matchup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("RoundId")
                        .HasColumnType("int");

                    b.Property<int?>("ScoreA")
                        .HasColumnType("int");

                    b.Property<int?>("ScoreB")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoundId");

                    b.ToTable("Matchups");
                });

            modelBuilder.Entity("CTFTournamentPlanner.Models.Player", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTeamLeader")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TeamId")
                        .HasColumnType("int");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("TeamId");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "372725a0-0897-4dd1-a77a-0f9cce9ca7ad",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "26a9fa54-7260-4559-a7a5-e61dc802488d",
                            Email = "admin@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@EXAMPLE.COM",
                            NormalizedUserName = "ADMIN@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEPDMPTvhL2FmZJsh5lETQDv78ufLkJesWlJ8KHUF8Y3T1DLqoirN+HGJADiZGHhIcw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0b58c346-bad1-46a3-8695-2dda0bb0fea9",
                            TwoFactorEnabled = false,
                            UserName = "admin@example.com"
                        },
                        new
                        {
                            Id = "b2792493-756e-419b-966c-a9505fa65a64",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7854d501-d83e-40d5-9d07-64a174c15c4a",
                            Email = "aarde@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "AARDE@EXAMPLE.COM",
                            NormalizedUserName = "AARDE@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEId36yjCzSVwDWVS+M1pu+5SIgiamahDXWdGU4Ip7AzkYzOCIQOAICWbb5PU6Vff/g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e38396c0-fb0e-4b4a-84c0-43a455ef849c",
                            TeamId = 1,
                            TwoFactorEnabled = false,
                            UserName = "aarde@example.com"
                        },
                        new
                        {
                            Id = "5ddcc3f4-d599-4cbe-b869-8415c1aaecc0",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f04ea787-c824-4369-be6b-447d6b59e784",
                            Email = "mars@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "MARS@EXAMPLE.COM",
                            NormalizedUserName = "MARS@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEDb2yDmlqzRgeNnVJALprItdsosPJKLtopiMxWuxYCbkMkIn2YetKcn2FbVy/zWhZw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4e024aeb-a9f8-4990-b1eb-67b01620fb5b",
                            TeamId = 1,
                            TwoFactorEnabled = false,
                            UserName = "mars@example.com"
                        },
                        new
                        {
                            Id = "8aba06fb-8f8f-4c50-85fb-e36f96f0ec45",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "416aa46f-97aa-4239-ad42-920df2d41fa8",
                            Email = "venus@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "VENUS@EXAMPLE.COM",
                            NormalizedUserName = "VENUS@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEJ0/8dCqTQE3lZpexLpxEOKFttf6ev5McyLq6yu20C01UFvO7/wu3FCuSv/hUAMZEw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9b950078-b016-4836-bdac-55655e0c02b6",
                            TeamId = 1,
                            TwoFactorEnabled = false,
                            UserName = "venus@example.com"
                        },
                        new
                        {
                            Id = "6f89177a-70e9-441a-9a4c-a321d47010c3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9000f3f4-8377-4200-9909-74c29b270328",
                            Email = "mercurius@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "MERCURIUS@EXAMPLE.COM",
                            NormalizedUserName = "MERCURIUS@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEKJ4TGU8oq+VuT7aHtS40XgsaaF71JQBdSYCiADCzzf6Bw2pFpVO3HNlKwbtQci2aw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fb8b8f08-d4ad-4acf-bbef-532a48471872",
                            TeamId = 1,
                            TwoFactorEnabled = false,
                            UserName = "mercurius@example.com"
                        },
                        new
                        {
                            Id = "8ae2c649-10a0-465e-841d-0bd4a9d2a1c6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2e0d7952-3274-4834-936c-09378fd3d107",
                            Email = "uranus@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "URANUS@EXAMPLE.COM",
                            NormalizedUserName = "URANUS@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEBRRk9zMm01MmeMWhiOJT5sMl0kvAcJsB4xOYA8HHCTwJqkzmH52OHFEpd54dOnFgw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3b8cce24-dbcf-4c8e-8303-b79ee133e286",
                            TeamId = 1,
                            TwoFactorEnabled = false,
                            UserName = "uranus@example.com"
                        },
                        new
                        {
                            Id = "d97cf9b9-96e3-489b-ade4-d500b3e03cbd",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2f5ac3b3-3d75-4296-8970-42545837061e",
                            Email = "neptunes@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "NEPTUNES@EXAMPLE.COM",
                            NormalizedUserName = "NEPTUNES@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAELhz+tgjz0diDsyRHyEagnCUJO2HAD4zZwi1xUQ3sQEwSaRGBPmlwKUff/UBrTlRXg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0423fde5-33b1-4751-b5e3-0ee901e30341",
                            TeamId = 1,
                            TwoFactorEnabled = false,
                            UserName = "neptunes@example.com"
                        },
                        new
                        {
                            Id = "2211aa7a-3c95-418d-94fb-0b7d6b7204f5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8ee71462-a5bf-4a8e-9479-f98f0f3b496b",
                            Email = "saturnus@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "SATURNUS@EXAMPLE.COM",
                            NormalizedUserName = "SATURNUS@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEJ7T8a/Tj2io6VtfS/bhndzGoDLzLt7YSPFelCQmkVJccaPdxk2x2jmkZTmqQ4xX2Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "bfeffe35-841e-4d02-be64-18d7db6c8918",
                            TeamId = 1,
                            TwoFactorEnabled = false,
                            UserName = "saturnus@example.com"
                        },
                        new
                        {
                            Id = "7ac21402-320b-45ce-bfa0-1d76b1f32dbb",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5dfa1c8f-fd17-4413-98e2-78fe5dd6ad76",
                            Email = "jupiter@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "JUPITER@EXAMPLE.COM",
                            NormalizedUserName = "JUPITER@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEPZiCvhUchEuOs1sxwX9aJ+J/HV1hi5l4YIdkumgA1HQssdl67TrmAg5WiSfEIWjEA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "259408e9-0c85-4711-a69d-ef146bcd27be",
                            TeamId = 1,
                            TwoFactorEnabled = false,
                            UserName = "jupiter@example.com"
                        },
                        new
                        {
                            Id = "bdcb7d13-44c4-4931-ae10-ffa6ab779d5e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "14433ea7-c60f-468b-8fe8-59ed246f80af",
                            Email = "octane@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "OCTANE@EXAMPLE.COM",
                            NormalizedUserName = "OCTANE@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEEJPiIhnswJi6qbUK8eo7EuMT8CQkEYocv3TIFBQMTTadWXvi4JPH/KvkGVme1nijA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1ba297ae-7405-4e9a-ab16-0e1b3031aaad",
                            TeamId = 2,
                            TwoFactorEnabled = false,
                            UserName = "octane@example.com"
                        },
                        new
                        {
                            Id = "bc8f77ab-a544-4c3c-9ae7-163c15756cb1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bfa80a73-f92b-4b5e-bbac-d5c75a8f6bf0",
                            Email = "breakout@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "BREAKOUT@EXAMPLE.COM",
                            NormalizedUserName = "BREAKOUT@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEJ3V+DM91mM3qdIVnyuR0Q0+X8ZL/hwpnpCrh0693tWEo72RUmu2ogOCGyaTe9wmbg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6ddcb0e7-ff95-4404-84b5-9f0b2386490d",
                            TeamId = 2,
                            TwoFactorEnabled = false,
                            UserName = "breakout@example.com"
                        },
                        new
                        {
                            Id = "9ebf2be3-3e33-4bb8-a6fb-40eb5a3ccad9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "59cc05a5-f8ad-42a1-825e-73b26165a74b",
                            Email = "dominus@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "DOMINUS@EXAMPLE.COM",
                            NormalizedUserName = "DOMINUS@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEH+bMvVl6GjVPrMk42OMDW2PGCwbeliiIYny+5yJEZu9kVy49eh3DfMbP9FZDRGs2w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1bd82c3f-4dc4-4fc4-92c0-b2d9a987c598",
                            TeamId = 2,
                            TwoFactorEnabled = false,
                            UserName = "dominus@example.com"
                        },
                        new
                        {
                            Id = "1f8d80bb-14e2-4175-991b-2f790e85140b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f726e5f6-e5f5-49fd-bc69-092ef7484edd",
                            Email = "fennec@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "FENNEC@EXAMPLE.COM",
                            NormalizedUserName = "FENNEC@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAELUOiX9HeUf5y2Y2FPqPusXJnefUPGIDQSrX49Yyu23l0/NCVUhGHnr7VUPKDGgoNw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8cfe3dc0-94f1-4d23-84dd-4e9406500523",
                            TeamId = 2,
                            TwoFactorEnabled = false,
                            UserName = "fennec@example.com"
                        },
                        new
                        {
                            Id = "34187acc-a14d-49fa-9c5e-3ea3ea5e31ee",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "717dcd1f-21d4-4465-ad49-15f2611b232d",
                            Email = "volvo@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "VOLVO@EXAMPLE.COM",
                            NormalizedUserName = "VOLVO@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEF59hVoZi3Fwar4Z77xHPChH6xaakS7hQaJ1vE9xKaJIMU7zDZZgC8uxk591SqHWBQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e12fc1a0-7887-4357-8367-8599ea2d5572",
                            TeamId = 3,
                            TwoFactorEnabled = false,
                            UserName = "volvo@example.com"
                        },
                        new
                        {
                            Id = "b1c7a6f1-0be4-44b6-9fdf-cb1590a6aff2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e235e127-bcc6-486e-8ae8-175d3337382c",
                            Email = "volkswagen@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "VOLKSWAGEN@EXAMPLE.COM",
                            NormalizedUserName = "VOLKSWAGEN@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEJmd+nDHhf/b6FvvD6eRvWgNvK+PP5u+m6NsYBXv6590Ayip5wfdUnH1kQC9F04ROQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b901d589-8ea3-4d00-aef1-d3b74eb3966e",
                            TeamId = 3,
                            TwoFactorEnabled = false,
                            UserName = "volkswagen@example.com"
                        },
                        new
                        {
                            Id = "cdaca0e6-93db-49dc-aab3-51927c07127a",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d5b9b056-d5e3-48cc-8ca0-28caec5b966c",
                            Email = "toyota@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "TOYOTA@EXAMPLE.COM",
                            NormalizedUserName = "TOYOTA@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAECXAEcrlCyc+ysB3+UtMjUVRCDi3tsJZAkiPWr/JMJn5A13+1Oe0h1llQYMGGQKXJQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "85aab69c-a176-4472-9711-c477a336b1f3",
                            TeamId = 3,
                            TwoFactorEnabled = false,
                            UserName = "toyota@example.com"
                        },
                        new
                        {
                            Id = "f5ee3cc8-4ad7-4ae0-9860-e9caf907c41f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1788b240-db2e-43ae-b1ac-58d50d0632ef",
                            Email = "ferrari@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "FERRARI@EXAMPLE.COM",
                            NormalizedUserName = "FERRARI@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEHyX1SbwBVnYWNaYXcM4bL3bJDerAUPqmBIZK6pge1TWntSEk7WRIPXHtSk/1nZhaw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b2071d72-d9fb-4e2f-8d1d-f1548df65235",
                            TeamId = 3,
                            TwoFactorEnabled = false,
                            UserName = "ferrari@example.com"
                        },
                        new
                        {
                            Id = "368da7c4-a8f6-49e7-b00b-2fa01cb4e955",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f18532d1-bf76-434d-ae70-5bcc5c75ecb6",
                            Email = "mercedes@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "MERCEDES@EXAMPLE.COM",
                            NormalizedUserName = "MERCEDES@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEJpoyyOc0Tq+d9/wwqvwcc9/cFBPrx9RugCdNsLdVuPjxtAU021GxQgNWKM5IfM1Qg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8a47d76f-ea52-4c4c-85f6-a8f129eeef3c",
                            TeamId = 3,
                            TwoFactorEnabled = false,
                            UserName = "mercedes@example.com"
                        },
                        new
                        {
                            Id = "acb5d9bd-db27-4c08-82ff-f1e9ac445b12",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "edaaf3ce-f3a0-4ff2-986b-ea8adcea735f",
                            Email = "bruce@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "BRUCE@EXAMPLE.COM",
                            NormalizedUserName = "BRUCE@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEMTbP2d+6tYKjnpap2t964YdGRYp8xfTOUq2clpQmMzagzdClFIu6Ym7Jal6j0+aPg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "360ecd24-8712-4dfb-a2b3-a451089e9f11",
                            TeamId = 4,
                            TwoFactorEnabled = false,
                            UserName = "bruce@example.com"
                        },
                        new
                        {
                            Id = "8606f29f-7473-453f-b1bd-5e2dc38ef7a2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "31364130-b4b0-4d8a-963e-e772649163e4",
                            Email = "mcqueen@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "MCQUEEN@EXAMPLE.COM",
                            NormalizedUserName = "MCQUEEN@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEGBq//BgnVTJnDdYUAsuO2/GbTsNeh0fbNnsvDgWbpq4dP+2sO/zvOM7Dmi/k82kQg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f835eca4-58b3-4e67-8ca9-7d7e1f6a89f9",
                            TeamId = 5,
                            TwoFactorEnabled = false,
                            UserName = "mcqueen@example.com"
                        },
                        new
                        {
                            Id = "cc9626b0-186a-4089-88ce-a73c92297b41",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4aa663da-d463-4362-bc19-dd84dc8b2577",
                            Email = "mack@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "MACK@EXAMPLE.COM",
                            NormalizedUserName = "MACK@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEMGF0CjWYEXgC8swEv51ydbqFQAGClorHKjBT7XTdzz0Rh8qOolsOs8XzVVQQeXwCA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0dd0483d-09b5-424d-8b0b-9819df92408e",
                            TeamId = 5,
                            TwoFactorEnabled = false,
                            UserName = "mack@example.com"
                        },
                        new
                        {
                            Id = "a230d934-3c94-46c8-aa89-a7c8b0272555",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "dd3da691-fa9c-42ce-9e0c-518fb0986efa",
                            Email = "rusty@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "RUSTY@EXAMPLE.COM",
                            NormalizedUserName = "RUSTY@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEIURFzLqSR8fD0yCY4qO+9ETc4hafokInX+++AZHfPSpNxEv3qx1PhWhY0TFP8kr5g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2bda3d6c-600d-4b17-9a5a-f3c1b8e76220",
                            TeamId = 5,
                            TwoFactorEnabled = false,
                            UserName = "rusty@example.com"
                        },
                        new
                        {
                            Id = "ac79763b-ae53-4ce5-8f68-203f76af1b7d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f36a2269-7ab2-4d9f-a378-81f0d8a8d37f",
                            Email = "dusty@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "DUSTY@EXAMPLE.COM",
                            NormalizedUserName = "DUSTY@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEFL0TNUWHUE3IE+elHvM/PQSRaW+1d64ASxM65Qzq5fSY2HiVYLQDOLIWcl6UOuuZw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c169aece-6c2d-4631-b4e5-456c86c66c21",
                            TeamId = 5,
                            TwoFactorEnabled = false,
                            UserName = "dusty@example.com"
                        },
                        new
                        {
                            Id = "fba5cece-9c57-4c66-820e-34a7e0221379",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2fe5381b-ed5f-41aa-a4c5-247b6932a442",
                            Email = "banaan@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "BANAAN@EXAMPLE.COM",
                            NormalizedUserName = "BANAAN@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEIZtAjh/nxmt5DxxBgjlCMR6YkDUH8PImLgjjDsgf9Gyt/dGz0wk5JqqG5CJ1kxLqw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "50d8cbd1-a3a8-4eac-b029-33cc2c7563a7",
                            TeamId = 6,
                            TwoFactorEnabled = false,
                            UserName = "banaan@example.com"
                        },
                        new
                        {
                            Id = "0378d250-3a61-4a5e-b0d4-619589674eef",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b3757af8-b8a2-4da1-9982-5009eaca6a07",
                            Email = "citroen@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "CITROEN@EXAMPLE.COM",
                            NormalizedUserName = "CITROEN@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEM2K36erT+IMkcgFF6sUqV5SaSNAxaNfQtQUxb9GqQCSK3RHgAcI4nrLCM9FIo/P5A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a4de1177-77b8-40d5-b4fe-47d7eb68d5db",
                            TeamId = 6,
                            TwoFactorEnabled = false,
                            UserName = "citroen@example.com"
                        },
                        new
                        {
                            Id = "f7cba7eb-6d61-433b-a10f-2148dcda3412",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "20665232-5d64-4b8c-81e8-2b414827da2a",
                            Email = "sinaasappel@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "SINAASAPPEL@EXAMPLE.COM",
                            NormalizedUserName = "SINAASAPPEL@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEKsXPfPjFt62Sh/AbO8scoX4luiO3qwEfbvvUa39XNaPGgf1D37IKBIyb4IBTx3pUw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "46eaccc8-4d3a-4fe2-8394-505602fff88c",
                            TeamId = 6,
                            TwoFactorEnabled = false,
                            UserName = "sinaasappel@example.com"
                        },
                        new
                        {
                            Id = "a39e6e16-e0f9-4a71-b88e-357d0fb2a32a",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "13a9b269-bed7-422b-9df6-e18ea43fcd9e",
                            Email = "watermeloen@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "WATERMELOEN@EXAMPLE.COM",
                            NormalizedUserName = "WATERMELOEN@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAENWplyNgoE3LMOpnpyfj/LjRB5npUxXCfsenSTvGQTT8/raUN3sZc2F20wkwFbu6AQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c617c79d-a7d7-4066-8b0f-b54afa49edf1",
                            TeamId = 6,
                            TwoFactorEnabled = false,
                            UserName = "watermeloen@example.com"
                        },
                        new
                        {
                            Id = "89afa77f-a512-4012-8dd5-1413a9639b36",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "828e4b40-dd75-4dca-bb04-4c465de3d532",
                            Email = "appel@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "APPEL@EXAMPLE.COM",
                            NormalizedUserName = "APPEL@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAELB2RPqnBc8qs8amqod1s2LXuPdMiNRP3l44QlFCZORkaqutNMsVpX1z5OsJYnICEg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "828063a9-9106-45cc-933a-19be7e8df53a",
                            TeamId = 6,
                            TwoFactorEnabled = false,
                            UserName = "appel@example.com"
                        },
                        new
                        {
                            Id = "887aa203-cfcb-422a-a2a0-05da9265f3fb",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "53bc7bff-5b9e-4060-b1b4-d144c43cbac7",
                            Email = "peer@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "PEER@EXAMPLE.COM",
                            NormalizedUserName = "PEER@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEP2d5YYlCw3QGE1i6I6w4NP4P0EsBjINoEGyBvs5qc3HXLBUQxLEFubQJTx7NKk90A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b8fb918f-55f8-479f-9794-15aee42accb4",
                            TeamId = 6,
                            TwoFactorEnabled = false,
                            UserName = "peer@example.com"
                        },
                        new
                        {
                            Id = "09273e18-b9c7-47bf-a489-77804bf304f9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3f201235-5bb9-4aee-a7b0-5dc3f6afdf7c",
                            Email = "kiwi@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "KIWI@EXAMPLE.COM",
                            NormalizedUserName = "KIWI@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEEdK2ia52+X4lhbkC3NBkEVrR6It4GMgsV7FCS8kpJFgz+nLGc1E2/tkiV63VviOKQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fa1f8b0f-c004-48e7-be77-12e7e3d0513f",
                            TeamId = 6,
                            TwoFactorEnabled = false,
                            UserName = "kiwi@example.com"
                        },
                        new
                        {
                            Id = "401d0804-10c0-4f38-9217-8c2e9d4289de",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c960a90c-a4c9-4094-a06f-495e43f95711",
                            Email = "avocado@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "AVOCADO@EXAMPLE.COM",
                            NormalizedUserName = "AVOCADO@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEPv8DFrV4RTnbN4qQCIz1zAhadZfEBZ4tUxiOEnklDckAKFZY5zvbkSEGptAkhk4jw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8543c1a0-0e2f-44ac-8340-7160036bb2ff",
                            TeamId = 6,
                            TwoFactorEnabled = false,
                            UserName = "avocado@example.com"
                        },
                        new
                        {
                            Id = "149e491c-b736-4f2f-ba4a-2acb0c7528a1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "30f20eea-6992-437e-84f5-c9907e35a5bb",
                            Email = "waterzwijn@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "WATERZWIJN@EXAMPLE.COM",
                            NormalizedUserName = "WATERZWIJN@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEC93H6lz5UwnoCLtbgPJmb3AaNgW2DT+LONnDE9t/iM6G5pxXi+VdfGFtJndZe9DCw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9245fe04-a8a7-4664-9115-ece0b058d996",
                            TeamId = 7,
                            TwoFactorEnabled = false,
                            UserName = "waterzwijn@example.com"
                        },
                        new
                        {
                            Id = "06a3572a-4bec-47c7-a38b-579b385dd4de",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3fd93de7-dc72-4f6a-b1ef-0cb463d8f14e",
                            Email = "huiskat@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "HUISKAT@EXAMPLE.COM",
                            NormalizedUserName = "HUISKAT@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEPmPDwFFT80I30TUe39y/12+Upv18atBOASKtp9Y80BxdjBVogHQlW72OpsjmBQM7w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "cb171dfa-f817-4447-875f-29ed169c87f4",
                            TeamId = 7,
                            TwoFactorEnabled = false,
                            UserName = "huiskat@example.com"
                        },
                        new
                        {
                            Id = "febc3155-2082-4777-9b13-2baa557513f1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d57b5b98-687f-4e9b-afca-d77f04760ab4",
                            Email = "hyena@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "HYENA@EXAMPLE.COM",
                            NormalizedUserName = "HYENA@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEGJuJyPtGJTz5bklK1dX1TgbZNKzwd6vbQLJYwiIP5fHmbwppzuWZsi9v5OLdUWtyg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d41cae1b-29fb-4385-ba6d-74558d561eb9",
                            TeamId = 7,
                            TwoFactorEnabled = false,
                            UserName = "hyena@example.com"
                        });
                });

            modelBuilder.Entity("CTFTournamentPlanner.Models.Round", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BracketId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BracketId");

                    b.ToTable("Rounds");
                });

            modelBuilder.Entity("CTFTournamentPlanner.Models.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Teams");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Gewoon buitenaards goed!",
                            Name = "Planeten"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Wij zijn de betere auto's. Wij rijden niet alleen, wij vliegen naar de overwinning!",
                            Name = "Flip Reset"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Waarom zou je naar de overwinning rennen als je naar de overwinning kunt rijden?",
                            Name = "Auto"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Onze prestaties zijn te allen tijde vlekkeloos!",
                            Name = "Vlekkeloos"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Ka-chow!",
                            Name = "Rusteze"
                        },
                        new
                        {
                            Id = 6,
                            Description = "Zoet of zuur, wij winnen elk uur!",
                            Name = "Fruit"
                        },
                        new
                        {
                            Id = 7,
                            Description = "Wij rennen naar de overwinning!",
                            Name = "Vierpoten"
                        });
                });

            modelBuilder.Entity("MatchupTeam", b =>
                {
                    b.Property<int>("MatchupsId")
                        .HasColumnType("int");

                    b.Property<int>("TeamsId")
                        .HasColumnType("int");

                    b.HasKey("MatchupsId", "TeamsId");

                    b.HasIndex("TeamsId");

                    b.ToTable("MatchupTeam");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "e0f4adb4-8c3d-45ff-a814-62c3c873fba5",
                            Name = "Administrators",
                            NormalizedName = "ADMINISTRATORS"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "372725a0-0897-4dd1-a77a-0f9cce9ca7ad",
                            RoleId = "e0f4adb4-8c3d-45ff-a814-62c3c873fba5"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("BracketTeam", b =>
                {
                    b.HasOne("CTFTournamentPlanner.Models.Bracket", null)
                        .WithMany()
                        .HasForeignKey("BracketsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CTFTournamentPlanner.Models.Team", null)
                        .WithMany()
                        .HasForeignKey("TeamsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CTFTournamentPlanner.Models.Matchup", b =>
                {
                    b.HasOne("CTFTournamentPlanner.Models.Round", "Round")
                        .WithMany("Matchups")
                        .HasForeignKey("RoundId");

                    b.Navigation("Round");
                });

            modelBuilder.Entity("CTFTournamentPlanner.Models.Player", b =>
                {
                    b.HasOne("CTFTournamentPlanner.Models.Team", "Team")
                        .WithMany("Players")
                        .HasForeignKey("TeamId");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("CTFTournamentPlanner.Models.Round", b =>
                {
                    b.HasOne("CTFTournamentPlanner.Models.Bracket", "Bracket")
                        .WithMany("Rounds")
                        .HasForeignKey("BracketId");

                    b.Navigation("Bracket");
                });

            modelBuilder.Entity("MatchupTeam", b =>
                {
                    b.HasOne("CTFTournamentPlanner.Models.Matchup", null)
                        .WithMany()
                        .HasForeignKey("MatchupsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CTFTournamentPlanner.Models.Team", null)
                        .WithMany()
                        .HasForeignKey("TeamsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("CTFTournamentPlanner.Models.Player", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("CTFTournamentPlanner.Models.Player", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CTFTournamentPlanner.Models.Player", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("CTFTournamentPlanner.Models.Player", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CTFTournamentPlanner.Models.Bracket", b =>
                {
                    b.Navigation("Rounds");
                });

            modelBuilder.Entity("CTFTournamentPlanner.Models.Round", b =>
                {
                    b.Navigation("Matchups");
                });

            modelBuilder.Entity("CTFTournamentPlanner.Models.Team", b =>
                {
                    b.Navigation("Players");
                });
#pragma warning restore 612, 618
        }
    }
}
