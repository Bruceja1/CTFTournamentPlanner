// <auto-generated />
using System;
using CTFTournamentPlanner.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CTFTournamentPlanner.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20231019123157_TroubleShootingMatchupEdit3")]
    partial class TroubleShootingMatchupEdit3
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BracketTeam", b =>
                {
                    b.Property<int>("BracketsId")
                        .HasColumnType("int");

                    b.Property<int>("TeamsId")
                        .HasColumnType("int");

                    b.HasKey("BracketsId", "TeamsId");

                    b.HasIndex("TeamsId");

                    b.ToTable("BracketTeam");
                });

            modelBuilder.Entity("CTFTournamentPlanner.Models.Bracket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsGenerated")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Brackets");
                });

            modelBuilder.Entity("CTFTournamentPlanner.Models.Matchup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("RoundId")
                        .HasColumnType("int");

                    b.Property<int?>("ScoreA")
                        .HasColumnType("int");

                    b.Property<int?>("ScoreB")
                        .HasColumnType("int");

                    b.Property<int?>("SelectedTeamAId")
                        .HasColumnType("int");

                    b.Property<int?>("SelectedTeamBId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoundId");

                    b.ToTable("Matchups");
                });

            modelBuilder.Entity("CTFTournamentPlanner.Models.Player", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTeamLeader")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TeamId")
                        .HasColumnType("int");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("TeamId");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "372725a0-0897-4dd1-a77a-0f9cce9ca7ad",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5ee2fb87-11a6-470c-807a-c53e1fb0b2ea",
                            Email = "admin@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@EXAMPLE.COM",
                            NormalizedUserName = "ADMIN@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEF2HOr0ygC/F0WiBmXtE35mLcgKRbtZ1CwotobQpFI0n6PbC/kDztJtwZvuHSX3CpQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a6f5dde3-ad51-48d2-b1f0-c3200dc93962",
                            TwoFactorEnabled = false,
                            UserName = "admin@example.com"
                        },
                        new
                        {
                            Id = "28b9693a-fc09-4c80-ab6e-c414f7c801f6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fe3085ea-5810-4cbf-8b74-c7bf1178bdb7",
                            Email = "aarde@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "AARDE@EXAMPLE.COM",
                            NormalizedUserName = "AARDE@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEI6VwiP+/q4rk8+DxfSGqvj19DpC8Mkpe76HiAnl55eh8fR3yyV52ZXLX9zTqs9Peg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "04701579-f9f9-4867-a356-acec88a02dbe",
                            TeamId = 1,
                            TwoFactorEnabled = false,
                            UserName = "aarde@example.com"
                        },
                        new
                        {
                            Id = "5845d038-1baf-4eb0-a825-45ee7d7e6aab",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9c012efc-be5b-41f7-8f81-fdd6ae309d05",
                            Email = "mars@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "MARS@EXAMPLE.COM",
                            NormalizedUserName = "MARS@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEAHxjLkfZSpupTWCshVwYEdJuK1ryuf5EdiZS98BRXa/kgi+vJ5legaOEpXeWEeEdQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "137cb173-7b3a-4007-85f8-6da61afffb6d",
                            TeamId = 1,
                            TwoFactorEnabled = false,
                            UserName = "mars@example.com"
                        },
                        new
                        {
                            Id = "03f82277-7b46-4b41-97b3-a19648e8b4a9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "81c12042-150d-4843-a9d5-a7bbba871438",
                            Email = "venus@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "VENUS@EXAMPLE.COM",
                            NormalizedUserName = "VENUS@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEHFCYAOTVxmEskbpu5uMNb2pP9WglMxkYpG31q/1TFL0Yjh8Pivgwwfh98JBrhCvkA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "68ff7f29-7090-48c2-8c76-12d590980daf",
                            TeamId = 1,
                            TwoFactorEnabled = false,
                            UserName = "venus@example.com"
                        },
                        new
                        {
                            Id = "8ad109ab-0b17-453f-a1c8-33873ad18b08",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "42e8bb56-1393-4334-93c2-34437e483a48",
                            Email = "mercurius@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "MERCURIUS@EXAMPLE.COM",
                            NormalizedUserName = "MERCURIUS@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEPFr3AuPf7BtGmuwoqwMAvW+sH5g18LhaBzYz4egH2n9z75QTCwyLjnWwWHX3D/j8w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1a12a32d-f553-444b-bcc3-6e4e96c2b599",
                            TeamId = 1,
                            TwoFactorEnabled = false,
                            UserName = "mercurius@example.com"
                        },
                        new
                        {
                            Id = "6524c312-d500-48c1-97ed-b72c0a207da5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "44ebb5d8-a3d6-4077-8a9c-11fcbd690b4e",
                            Email = "uranus@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "URANUS@EXAMPLE.COM",
                            NormalizedUserName = "URANUS@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEDICmmRlyW9vCIe/Wsa0dZNf7CjMKmX+4kKp9wiafvjSoM4vJWXTTXAJj1GNV5U4sQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6352a3c1-305a-4251-82d4-5c45277b3cde",
                            TeamId = 1,
                            TwoFactorEnabled = false,
                            UserName = "uranus@example.com"
                        },
                        new
                        {
                            Id = "698102e5-1bd2-41f7-988a-04d51c8cd1cc",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1c0c66ab-85c5-4279-9b5c-e54c55ebc37c",
                            Email = "neptunes@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "NEPTUNES@EXAMPLE.COM",
                            NormalizedUserName = "NEPTUNES@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEAYfZdCj+KCPB0h3yYyZ37gP47sIXqwG2WguQG187el1KP3uWYU7EFunTv6CYw9P0Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c3d94050-6c09-45f5-b067-eb3d530f6423",
                            TeamId = 1,
                            TwoFactorEnabled = false,
                            UserName = "neptunes@example.com"
                        },
                        new
                        {
                            Id = "6e31a654-7892-4f7a-ab0a-296c4110211d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "160f6f52-ce1c-4ef3-a1ec-b7931534f591",
                            Email = "saturnus@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "SATURNUS@EXAMPLE.COM",
                            NormalizedUserName = "SATURNUS@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEHBAHdw/mlkMp3xBIosE7ZixjaKgjcczl1JtbnkKTeFaECGr7JzH+LQBFI1sX6XzcQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e4edfeaa-9a0a-4f7f-b3e4-96fe9cd3fd39",
                            TeamId = 1,
                            TwoFactorEnabled = false,
                            UserName = "saturnus@example.com"
                        },
                        new
                        {
                            Id = "981993a3-fd7a-4630-985b-bde584485cf5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "99bf5ded-0735-4c1e-850f-d196ae72f694",
                            Email = "jupiter@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "JUPITER@EXAMPLE.COM",
                            NormalizedUserName = "JUPITER@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEO/+LktX3gzoPVdnWMWFAqGHCksBZ0wi0A2oCv31FVWqPQpm2zFeRlNaAaw0sekNtA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "71822140-1eb3-4148-b1e3-87ee4b5006ed",
                            TeamId = 1,
                            TwoFactorEnabled = false,
                            UserName = "jupiter@example.com"
                        },
                        new
                        {
                            Id = "5a8cb72f-fc51-4d90-89f5-99f4bfc346d5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "dae7f9f2-29f8-45df-aa5c-28ca977dcdb1",
                            Email = "octane@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "OCTANE@EXAMPLE.COM",
                            NormalizedUserName = "OCTANE@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEIAZXT3YIZcQsXaxUFAf1mrbZxJxoDK+50jsvs861Gdn8uvaXcHCPpzXo/6b6BtaTw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4436734f-fd82-4919-935f-cafa77857fa5",
                            TeamId = 2,
                            TwoFactorEnabled = false,
                            UserName = "octane@example.com"
                        },
                        new
                        {
                            Id = "8f7b415e-65e7-412b-9333-0c8b3c86095c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5884871e-4ea6-4d7a-b870-720095dd05bb",
                            Email = "breakout@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "BREAKOUT@EXAMPLE.COM",
                            NormalizedUserName = "BREAKOUT@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEIQkftvAuQIEyHeIU6rrcvVDjY4fpp7Q9H+76DQ7mxWTzqwrkZNIHMR4nxn1rC2u+w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fa800a8b-dbc2-47f6-982d-7ac1c5c1ed4f",
                            TeamId = 2,
                            TwoFactorEnabled = false,
                            UserName = "breakout@example.com"
                        },
                        new
                        {
                            Id = "5d3cc181-834a-48bd-a638-0b589a8a10f6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d0326133-5158-43cc-965b-dbd131f30a6a",
                            Email = "dominus@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "DOMINUS@EXAMPLE.COM",
                            NormalizedUserName = "DOMINUS@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEIAs0CzjLkRXSLWCLB9wr7a05qinQ6O2hEMfSGGpEhVY6O5YGiP/TxLsQBFnwjPnLA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3e31bd8b-a2cf-4253-bbfe-0ab63d3ba61f",
                            TeamId = 2,
                            TwoFactorEnabled = false,
                            UserName = "dominus@example.com"
                        },
                        new
                        {
                            Id = "47b38808-9b1c-41be-9930-9054b96d7af7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "73925466-36f5-4eca-936a-b207fb678948",
                            Email = "fennec@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "FENNEC@EXAMPLE.COM",
                            NormalizedUserName = "FENNEC@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEMqPBeiGFPNltNlo40UvFlTYbaeFojdX6SLmxmlgb8DZlE9R/zYEzdggIEP8hnf5Sw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "46d0cc82-a794-4a34-ad56-e81d273c077a",
                            TeamId = 2,
                            TwoFactorEnabled = false,
                            UserName = "fennec@example.com"
                        },
                        new
                        {
                            Id = "f226411e-b877-472f-b44a-9500791719c3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ae7d9fc0-834b-46b1-acc2-4a4dfeaaca40",
                            Email = "volvo@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "VOLVO@EXAMPLE.COM",
                            NormalizedUserName = "VOLVO@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEAZ8FI3k1pjQL9THH1jrVBJ6xVUIIB0dWHI7OZ43DdieAhcRJFG0kFmhBJJlKEkLMQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ca0b7903-b46a-47f8-9424-82f430c1b7db",
                            TeamId = 3,
                            TwoFactorEnabled = false,
                            UserName = "volvo@example.com"
                        },
                        new
                        {
                            Id = "8a691660-ed75-4837-a7b9-9b772f774cd5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "37cfbd94-fccb-4906-a348-3de4cc26f67b",
                            Email = "volkswagen@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "VOLKSWAGEN@EXAMPLE.COM",
                            NormalizedUserName = "VOLKSWAGEN@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEMNAO0pNtMqnNx8zeGU3GFlYjuIwYe/E2AD7pU6gZvslf3dOqA55PoAWOTu1DwjAQg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1bdd84d9-b87d-49ca-a24b-74fe331fa862",
                            TeamId = 3,
                            TwoFactorEnabled = false,
                            UserName = "volkswagen@example.com"
                        },
                        new
                        {
                            Id = "64beef19-451e-4da6-bbbc-7428284df483",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "77275ca2-583a-44f2-a21b-0c9ecdc91754",
                            Email = "toyota@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "TOYOTA@EXAMPLE.COM",
                            NormalizedUserName = "TOYOTA@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEKmzbDZgUi2OCp1vdgVYGowFFmzArKqoS1IJlrqU+OQVrie/F3rbq15xJvGI0awhaQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3692c3e3-fee8-4e15-96f7-7b913aa44563",
                            TeamId = 3,
                            TwoFactorEnabled = false,
                            UserName = "toyota@example.com"
                        },
                        new
                        {
                            Id = "fcdec7bd-6df1-4e13-9e3d-3ac62bb49928",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1676c3af-7f89-4179-a3c2-f394ee8e8f86",
                            Email = "ferrari@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "FERRARI@EXAMPLE.COM",
                            NormalizedUserName = "FERRARI@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEFz65semUvUcdQVGhIvYN9cOC7zRKJIs//Ny5ckLtXx9yD0K74gViBK4X9u2CATeKw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2a163730-3b97-4dca-8cd5-3f9ee9a06c47",
                            TeamId = 3,
                            TwoFactorEnabled = false,
                            UserName = "ferrari@example.com"
                        },
                        new
                        {
                            Id = "8ae65576-2651-4025-a66e-96e5e5a842f1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a537acf0-69f3-4646-9ed4-b5ced284b322",
                            Email = "mercedes@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "MERCEDES@EXAMPLE.COM",
                            NormalizedUserName = "MERCEDES@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEDBktLJx6UGEtKiIRo5YI5qNnWTo+s2uJxcwhF3mxSxizwVKs4Nyr5ARWl8G411wHw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "14270037-04cf-43be-b416-a7e22a48026c",
                            TeamId = 3,
                            TwoFactorEnabled = false,
                            UserName = "mercedes@example.com"
                        },
                        new
                        {
                            Id = "0b35554d-add0-4139-ac33-dc6c2b7457a3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "46878207-14b5-4507-818a-d66b3acd26f6",
                            Email = "bruce@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "BRUCE@EXAMPLE.COM",
                            NormalizedUserName = "BRUCE@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEAN91ZRFSS7cnNoAhojEFT7yC0n/9AuomMeB2TBQYhul1V0SeeMUZOTMf8BQE4ynwA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ce182ffc-514d-4612-83b6-efed9e597e46",
                            TeamId = 4,
                            TwoFactorEnabled = false,
                            UserName = "bruce@example.com"
                        },
                        new
                        {
                            Id = "2997e423-568c-4da8-b664-501fb008799a",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d57bb1c4-e03b-4965-8944-38693c5dfa36",
                            Email = "mcqueen@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "MCQUEEN@EXAMPLE.COM",
                            NormalizedUserName = "MCQUEEN@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEO67cqvWHlqW/K6//jFKoDjcV/UDh6uGwhCOAC6guVTjx44nZazL6YZlu8Q2BCrxag==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8ddea585-07ed-44ba-8c7f-cab92e1d068a",
                            TeamId = 5,
                            TwoFactorEnabled = false,
                            UserName = "mcqueen@example.com"
                        },
                        new
                        {
                            Id = "f15336e0-c646-4b6a-8b9c-37730222ac3e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d4be4b13-3840-42ba-a81e-646eef745eae",
                            Email = "mack@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "MACK@EXAMPLE.COM",
                            NormalizedUserName = "MACK@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEP13RwGF2IEfGO8J5kGp8tb78HZ0imHtWpaLmq2TqlpayMdOHY/sp1RsI4LU7H65xg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ad89ece9-d4a2-4a27-8d90-88bebe085883",
                            TeamId = 5,
                            TwoFactorEnabled = false,
                            UserName = "mack@example.com"
                        },
                        new
                        {
                            Id = "82979166-b60c-41d6-8d9f-534bccc15f28",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d73bd875-b3f2-46f9-9e5c-b5e20d0a36e8",
                            Email = "rusty@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "RUSTY@EXAMPLE.COM",
                            NormalizedUserName = "RUSTY@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEHe2HRYi165e6fcp4d0HaCxTHhGvMZv4ttoTDUSb63JtlLtM6laxl0plbpdFdhO5DQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8c48f636-7f74-4a4f-a8cf-9d08aac2a02f",
                            TeamId = 5,
                            TwoFactorEnabled = false,
                            UserName = "rusty@example.com"
                        },
                        new
                        {
                            Id = "d689d0d4-cc9e-4469-a286-81337a085dba",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2e6ae9a9-c4c5-466f-b640-baf40b4cd738",
                            Email = "dusty@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "DUSTY@EXAMPLE.COM",
                            NormalizedUserName = "DUSTY@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEPbkXyQWrN3/vbg/nB0eFF/mTefl/gxaP4iWhulF494ppVb2HxTIArnTfEcJrxUdIQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f4c1738e-ff90-4749-bc69-660a0a39e59a",
                            TeamId = 5,
                            TwoFactorEnabled = false,
                            UserName = "dusty@example.com"
                        },
                        new
                        {
                            Id = "8f3d77e7-3570-41a7-9f50-962ac816908e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0063a7c0-bf52-4fbc-93da-d2751cd47c5f",
                            Email = "banaan@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "BANAAN@EXAMPLE.COM",
                            NormalizedUserName = "BANAAN@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEFD8CsY+qQDo3x8G+oXIYHpC90/WT4kj8lI7mrZCSTE49CILhsocLmM10sMLPW16hQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5959bc4f-8836-4bdb-83bc-13d49c3a5cf8",
                            TeamId = 6,
                            TwoFactorEnabled = false,
                            UserName = "banaan@example.com"
                        },
                        new
                        {
                            Id = "5bbc77dd-8ea1-457f-b9ef-9193a8acc170",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "03675d12-5699-4e12-b9a0-be8c64933ba8",
                            Email = "citroen@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "CITROEN@EXAMPLE.COM",
                            NormalizedUserName = "CITROEN@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEAktunxvs3YK8CioIyOeTxUtuiy8Sr/54vDnXqBk8tvVACcSgjyJRiMW4Fm/mS19UA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "024234e7-edbc-4e83-83ef-03a851272e01",
                            TeamId = 6,
                            TwoFactorEnabled = false,
                            UserName = "citroen@example.com"
                        },
                        new
                        {
                            Id = "189da35c-07ca-49ba-b334-9da8a210b6e7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "afd191c9-ff71-43a3-a219-00ea438019af",
                            Email = "sinaasappel@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "SINAASAPPEL@EXAMPLE.COM",
                            NormalizedUserName = "SINAASAPPEL@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEMifrDifwiuoRKZyL8FKW9p6p5XD3xnatP+mNGxv4uIECuZPjn/2RS5IubY0MZahQA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a021269b-8cea-45bd-960b-73a50545c50e",
                            TeamId = 6,
                            TwoFactorEnabled = false,
                            UserName = "sinaasappel@example.com"
                        },
                        new
                        {
                            Id = "5751199c-6f4a-47d1-a485-05750d3ee739",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2413e175-8bab-4fa2-bd72-a296afb2e666",
                            Email = "watermeloen@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "WATERMELOEN@EXAMPLE.COM",
                            NormalizedUserName = "WATERMELOEN@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEEpkkpk/eL39uDTvERiOebMZ4Pa5H19CceIp/6B+V7fGeMdHbW89zOziigbZTwG/Nw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "10591a01-5a3b-4310-a4c7-0603a0b5f8ac",
                            TeamId = 6,
                            TwoFactorEnabled = false,
                            UserName = "watermeloen@example.com"
                        },
                        new
                        {
                            Id = "4d34100e-f703-4ea3-a2d9-019b6f3f36cc",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d6ca97f0-0d65-4c91-8ca1-bb091be20b0c",
                            Email = "appel@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "APPEL@EXAMPLE.COM",
                            NormalizedUserName = "APPEL@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEGCilxzufoh5Ak9qMjOjq3XDgwfYYYPxd5iG3Pi+dTkju35hnq4EkYSsRtaE3N866Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "629974da-a634-4262-b42f-2bcba8d61fe0",
                            TeamId = 6,
                            TwoFactorEnabled = false,
                            UserName = "appel@example.com"
                        },
                        new
                        {
                            Id = "0b6ccf3f-fd14-4167-a127-4083f3fc7d60",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e883fd22-6283-4f0b-9018-419dfd175bc1",
                            Email = "peer@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "PEER@EXAMPLE.COM",
                            NormalizedUserName = "PEER@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEB9C1+9GvIiqaMcEoaGM/kx0G0ebgVI1B+d+XhyrsX7UGu8I4Jxsw3JQOL11HVQJPQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9489a9e6-2058-4729-a677-03dd99347320",
                            TeamId = 6,
                            TwoFactorEnabled = false,
                            UserName = "peer@example.com"
                        },
                        new
                        {
                            Id = "3d6990f5-e8f2-460a-8951-c09dae102ee7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "adac8a88-b872-4b7a-8165-f39621d66bdf",
                            Email = "kiwi@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "KIWI@EXAMPLE.COM",
                            NormalizedUserName = "KIWI@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEMHE6Eb6EuW3VdPkSzMAGcW7tBQoaWzGDQ/pbPnapr6kKMy+4mZa1gacx4Rj3R3tNw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "307a0779-28ef-459c-99cf-43c10359fb20",
                            TeamId = 6,
                            TwoFactorEnabled = false,
                            UserName = "kiwi@example.com"
                        },
                        new
                        {
                            Id = "b19e4af6-f6c0-4244-8bc7-7ad7ffd8846b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7856ace4-c4df-4061-8033-30d986521ad4",
                            Email = "avocado@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "AVOCADO@EXAMPLE.COM",
                            NormalizedUserName = "AVOCADO@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAELsDOQi3xXYVClqRwfxX/tWpWM8RBww3M8Lb/kzUjBEKdGdS65sarnSALPgo6Qn3Ww==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0572db9a-7d63-4653-827e-869048df1797",
                            TeamId = 6,
                            TwoFactorEnabled = false,
                            UserName = "avocado@example.com"
                        },
                        new
                        {
                            Id = "19c7d8cc-f6d6-4f87-ac79-84d5d9e5752e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6d2b7f0b-2bc6-4e4a-b356-c51b3e219b04",
                            Email = "waterzwijn@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "WATERZWIJN@EXAMPLE.COM",
                            NormalizedUserName = "WATERZWIJN@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEGRLCIznMkYYqu8RvSHBrkjHq0/WquSLYM4UBF0UDY1/JsytWqqnk84r+fKfGfgZxA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "384232f5-bd26-4fb6-a30b-a6abff149d4d",
                            TeamId = 7,
                            TwoFactorEnabled = false,
                            UserName = "waterzwijn@example.com"
                        },
                        new
                        {
                            Id = "20532cb1-7383-42ab-b846-5e82bf4bc4cf",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4980aff4-5176-4b39-a9f4-c63f1280ba4b",
                            Email = "huiskat@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "HUISKAT@EXAMPLE.COM",
                            NormalizedUserName = "HUISKAT@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEKD29DsE4Oq4EgeSww2JfAHrDcq94LSvOVPMVRmAJt02ce1zBOOsOCBQMPig+mZRSQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "03483a10-89be-4b0f-b837-e810ad94afd2",
                            TeamId = 7,
                            TwoFactorEnabled = false,
                            UserName = "huiskat@example.com"
                        },
                        new
                        {
                            Id = "b498a0bc-07a5-48c2-bceb-2ba9c31991e2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c5353d88-dda1-4b07-a76f-e614ee644c90",
                            Email = "hyena@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "HYENA@EXAMPLE.COM",
                            NormalizedUserName = "HYENA@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEBcVv3/0ZdOMxVnSyWaFNfgHA8GBG8x35ft5PgjWFA0Z/lN+8gTr1XmmwbiRLNKi0g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "efc58bcc-a9f6-4278-9cb6-07bb558b3848",
                            TeamId = 7,
                            TwoFactorEnabled = false,
                            UserName = "hyena@example.com"
                        });
                });

            modelBuilder.Entity("CTFTournamentPlanner.Models.Round", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BracketId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BracketId");

                    b.ToTable("Rounds");
                });

            modelBuilder.Entity("CTFTournamentPlanner.Models.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Teams");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Gewoon buitenaards goed!",
                            Name = "Planeten"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Wij zijn de betere auto's. Wij rijden niet alleen, wij vliegen naar de overwinning!",
                            Name = "Flip Reset"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Waarom zou je naar de overwinning rennen als je naar de overwinning kunt rijden?",
                            Name = "Auto"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Onze prestaties zijn te allen tijde vlekkeloos!",
                            Name = "Vlekkeloos"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Ka-chow!",
                            Name = "Rusteze"
                        },
                        new
                        {
                            Id = 6,
                            Description = "Zoet of zuur, wij winnen elk uur!",
                            Name = "Fruit"
                        },
                        new
                        {
                            Id = 7,
                            Description = "Wij rennen naar de overwinning!",
                            Name = "Vierpoten"
                        });
                });

            modelBuilder.Entity("MatchupTeam", b =>
                {
                    b.Property<int>("MatchupsId")
                        .HasColumnType("int");

                    b.Property<int>("TeamsId")
                        .HasColumnType("int");

                    b.HasKey("MatchupsId", "TeamsId");

                    b.HasIndex("TeamsId");

                    b.ToTable("MatchupTeam");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "e0f4adb4-8c3d-45ff-a814-62c3c873fba5",
                            Name = "Administrators",
                            NormalizedName = "ADMINISTRATORS"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "372725a0-0897-4dd1-a77a-0f9cce9ca7ad",
                            RoleId = "e0f4adb4-8c3d-45ff-a814-62c3c873fba5"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("BracketTeam", b =>
                {
                    b.HasOne("CTFTournamentPlanner.Models.Bracket", null)
                        .WithMany()
                        .HasForeignKey("BracketsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CTFTournamentPlanner.Models.Team", null)
                        .WithMany()
                        .HasForeignKey("TeamsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CTFTournamentPlanner.Models.Matchup", b =>
                {
                    b.HasOne("CTFTournamentPlanner.Models.Round", "Round")
                        .WithMany("Matchups")
                        .HasForeignKey("RoundId");

                    b.Navigation("Round");
                });

            modelBuilder.Entity("CTFTournamentPlanner.Models.Player", b =>
                {
                    b.HasOne("CTFTournamentPlanner.Models.Team", "Team")
                        .WithMany("Players")
                        .HasForeignKey("TeamId");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("CTFTournamentPlanner.Models.Round", b =>
                {
                    b.HasOne("CTFTournamentPlanner.Models.Bracket", "Bracket")
                        .WithMany("Rounds")
                        .HasForeignKey("BracketId");

                    b.Navigation("Bracket");
                });

            modelBuilder.Entity("MatchupTeam", b =>
                {
                    b.HasOne("CTFTournamentPlanner.Models.Matchup", null)
                        .WithMany()
                        .HasForeignKey("MatchupsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CTFTournamentPlanner.Models.Team", null)
                        .WithMany()
                        .HasForeignKey("TeamsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("CTFTournamentPlanner.Models.Player", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("CTFTournamentPlanner.Models.Player", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CTFTournamentPlanner.Models.Player", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("CTFTournamentPlanner.Models.Player", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CTFTournamentPlanner.Models.Bracket", b =>
                {
                    b.Navigation("Rounds");
                });

            modelBuilder.Entity("CTFTournamentPlanner.Models.Round", b =>
                {
                    b.Navigation("Matchups");
                });

            modelBuilder.Entity("CTFTournamentPlanner.Models.Team", b =>
                {
                    b.Navigation("Players");
                });
#pragma warning restore 612, 618
        }
    }
}
