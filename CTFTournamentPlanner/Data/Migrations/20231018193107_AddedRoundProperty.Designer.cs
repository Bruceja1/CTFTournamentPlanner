// <auto-generated />
using System;
using CTFTournamentPlanner.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CTFTournamentPlanner.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20231018193107_AddedRoundProperty")]
    partial class AddedRoundProperty
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BracketTeam", b =>
                {
                    b.Property<int>("BracketsId")
                        .HasColumnType("int");

                    b.Property<int>("TeamsId")
                        .HasColumnType("int");

                    b.HasKey("BracketsId", "TeamsId");

                    b.HasIndex("TeamsId");

                    b.ToTable("BracketTeam");
                });

            modelBuilder.Entity("CTFTournamentPlanner.Models.Bracket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsGenerated")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Brackets");
                });

            modelBuilder.Entity("CTFTournamentPlanner.Models.Matchup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("RoundId")
                        .HasColumnType("int");

                    b.Property<int?>("ScoreA")
                        .HasMaxLength(100)
                        .HasColumnType("int");

                    b.Property<int?>("ScoreB")
                        .HasMaxLength(100)
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoundId");

                    b.ToTable("Matchups");
                });

            modelBuilder.Entity("CTFTournamentPlanner.Models.Player", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTeamLeader")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TeamId")
                        .HasColumnType("int");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("TeamId");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "372725a0-0897-4dd1-a77a-0f9cce9ca7ad",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4bb07c05-08e8-4be2-8bab-a253ce135941",
                            Email = "admin@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@EXAMPLE.COM",
                            NormalizedUserName = "ADMIN@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEGenOGKACaL6KavpC7yoqVMK8CwYV79OdyQ1UAm4OuX847ykf6XBFyoaTq8ToTHCdA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b58c0ccc-59d5-4335-a0c9-7f4a5af5711a",
                            TwoFactorEnabled = false,
                            UserName = "admin@example.com"
                        },
                        new
                        {
                            Id = "88ad180d-f18e-4954-a07d-06d4e6fc7f2a",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a9f863e5-9efe-425a-99d4-8fa07893041a",
                            Email = "aarde@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "AARDE@EXAMPLE.COM",
                            NormalizedUserName = "AARDE@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAENs/JxSH1Px9BijLiSFeoCE0pJWRDEDp/5rQkNIh7zgnnh78l3VHe9Yqnz3X9UOfLQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8fb31052-0bab-4d84-a1bb-877910639975",
                            TeamId = 1,
                            TwoFactorEnabled = false,
                            UserName = "aarde@example.com"
                        },
                        new
                        {
                            Id = "b07bdf82-2a32-4572-8813-d662b0e847e7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e8bb63fe-eee0-4beb-a871-5b91f278ba93",
                            Email = "mars@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "MARS@EXAMPLE.COM",
                            NormalizedUserName = "MARS@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAECPc/hxRZzRSdOotdN61Kxpl+9vlFwRcJEj86LqAzX7A4PDqd1V0VQ5Pxqdpt/7wIQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7177b624-4e63-4c16-b831-36f2e0db455b",
                            TeamId = 1,
                            TwoFactorEnabled = false,
                            UserName = "mars@example.com"
                        },
                        new
                        {
                            Id = "1b63d6f7-8fa4-4cad-ada5-9c9fa3c32f98",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "48b8f183-c6e5-493f-a0de-5a9c72e307be",
                            Email = "venus@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "VENUS@EXAMPLE.COM",
                            NormalizedUserName = "VENUS@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEIonv5gIeIyaYvvRVlQGONur18BNaHRdonq+k7O2Mw/7hAecm7clXZOlA7Y4YNQyPA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "232dd09e-7b1b-4362-9984-316ca2527cba",
                            TeamId = 1,
                            TwoFactorEnabled = false,
                            UserName = "venus@example.com"
                        },
                        new
                        {
                            Id = "29fbfb6a-5699-4920-b291-ce34c0311d2d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "68944319-daea-44c1-b611-51aa53477b86",
                            Email = "mercurius@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "MERCURIUS@EXAMPLE.COM",
                            NormalizedUserName = "MERCURIUS@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEPfvN59spj7lGOYOJNwbo8hMLOwVsTWRvFdR03fF+mK/3abukEujUeesDw1/YUONzQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "61bff71f-87b9-4290-9d10-99439de92c33",
                            TeamId = 1,
                            TwoFactorEnabled = false,
                            UserName = "mercurius@example.com"
                        },
                        new
                        {
                            Id = "0997f0f0-ac6e-4d67-a1a2-c2d72de248cf",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4df685c2-1a92-421c-b75b-86f93bc49ba7",
                            Email = "uranus@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "URANUS@EXAMPLE.COM",
                            NormalizedUserName = "URANUS@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAECvBI6afPsOENujcGvoNOtRzIbJDMopX+G6erbPZJGrDoF3t1+hBs71rd6/LrffCDg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9681178a-7231-42f1-ad3b-45d8f21349e5",
                            TeamId = 1,
                            TwoFactorEnabled = false,
                            UserName = "uranus@example.com"
                        },
                        new
                        {
                            Id = "35879cff-ebb6-42ba-ab0c-5d1a33b49a7c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "79464684-1bc8-44fd-8b0b-0d4951f81aaf",
                            Email = "neptunes@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "NEPTUNES@EXAMPLE.COM",
                            NormalizedUserName = "NEPTUNES@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEIOSoZ2HciYHoRD8paSc/4WsISe1/aljSossbeLFxjcI+pLTPUDSMdX3FWTHuvyp3A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5b2df839-65c8-4659-a7bc-ef4a92adbd36",
                            TeamId = 1,
                            TwoFactorEnabled = false,
                            UserName = "neptunes@example.com"
                        },
                        new
                        {
                            Id = "690e43dd-52c0-47b6-8cb9-c727dbd594b9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6a9936ed-a1bc-4fe1-a497-0ec595e7834b",
                            Email = "saturnus@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "SATURNUS@EXAMPLE.COM",
                            NormalizedUserName = "SATURNUS@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEFYv8/41GCvcOLhUWZ9ML/sB0vzWzerNBoj4iTIil9j2nRb/UNFzSh1J2C1CmTJQ8Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8e7a7fc9-9f13-4bb8-b711-b3a77407a7eb",
                            TeamId = 1,
                            TwoFactorEnabled = false,
                            UserName = "saturnus@example.com"
                        },
                        new
                        {
                            Id = "dccd2c1c-a6e4-4078-9b2a-658ac7b92eda",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "232f0f0e-c456-4e66-87bd-a10617235699",
                            Email = "jupiter@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "JUPITER@EXAMPLE.COM",
                            NormalizedUserName = "JUPITER@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEFBKoz18Yfjnux51BRmqwmy7SLyVoDjRdpfDfO7xy75NTQH3I7c8TZ0P6CvWfVPBCQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8a1f1618-be25-4fbd-a3ad-92c6c97692f7",
                            TeamId = 1,
                            TwoFactorEnabled = false,
                            UserName = "jupiter@example.com"
                        },
                        new
                        {
                            Id = "b4e4c85c-af22-4b5a-9c45-6830d519ff12",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "af60c13f-8549-4972-8c30-22980b86d327",
                            Email = "octane@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "OCTANE@EXAMPLE.COM",
                            NormalizedUserName = "OCTANE@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEEMPM4leRQX3n8pvqNnf+Q86vQrR2L7tyXcNXyZldg1T6XuHChKrUBAGLsACAVyFgg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9e04df34-884e-4c17-aaae-2c7df13be266",
                            TeamId = 2,
                            TwoFactorEnabled = false,
                            UserName = "octane@example.com"
                        },
                        new
                        {
                            Id = "c55dc049-b5c1-48d4-b3c4-5425d8d9fed9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8bd92f42-7c5c-4ec9-958b-e05b7ff466ea",
                            Email = "breakout@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "BREAKOUT@EXAMPLE.COM",
                            NormalizedUserName = "BREAKOUT@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEKpuHmy+U2dWXp+hh40DKWL3pVuCiAkseNtYWuTwvjGjBpXIWcHHIupvmh8/jDMtug==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c7c801ac-2673-481a-941b-714d6e31d28d",
                            TeamId = 2,
                            TwoFactorEnabled = false,
                            UserName = "breakout@example.com"
                        },
                        new
                        {
                            Id = "0ce0ae52-52cc-4b2a-aa82-ddd645db6b85",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e9bf975f-baa7-4bf1-9c92-6933f72d2a86",
                            Email = "dominus@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "DOMINUS@EXAMPLE.COM",
                            NormalizedUserName = "DOMINUS@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEIGXrYv31dws77pdhRJ9Qcs0ZLNaT2HNkoZClxzS4IJVH4GkG/Jm3jTxBrCwTG2UYA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5794c6ad-964b-4922-aee9-a520df7483dc",
                            TeamId = 2,
                            TwoFactorEnabled = false,
                            UserName = "dominus@example.com"
                        },
                        new
                        {
                            Id = "af541f99-9242-405c-a67f-1f5583a5a1cd",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "71d3bf4f-2a9e-44ed-b945-9847299a9ec3",
                            Email = "fennec@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "FENNEC@EXAMPLE.COM",
                            NormalizedUserName = "FENNEC@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEImhvkPT26oUSLxh+7KFzq2WhWhHQPECGdWIWLkP0Yu7xoG4CDa0PIYFIyk+ywDQdA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "496653a6-9728-421b-8e00-2e3dcbc8477f",
                            TeamId = 2,
                            TwoFactorEnabled = false,
                            UserName = "fennec@example.com"
                        },
                        new
                        {
                            Id = "94ffbe80-c7d7-4a0b-ba60-888f87e23279",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b1ff9444-1d8d-4db7-83f9-6a64d1319482",
                            Email = "volvo@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "VOLVO@EXAMPLE.COM",
                            NormalizedUserName = "VOLVO@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEGMeRumYYh1I53sCWNOjgfNVCqzS1osDVjebIpzRJkVs0lIKIEPrqEr0EsmVALtwqg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "de77cbfc-0dc5-4b1f-a041-efd13f28e2cd",
                            TeamId = 3,
                            TwoFactorEnabled = false,
                            UserName = "volvo@example.com"
                        },
                        new
                        {
                            Id = "b9b396b9-dd2e-4c4f-b571-68061e482177",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a4adce61-afab-4e4c-bd9b-02e54c079251",
                            Email = "volkswagen@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "VOLKSWAGEN@EXAMPLE.COM",
                            NormalizedUserName = "VOLKSWAGEN@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAELz4duOaY1fgT+gfIiP2221o7zX6cYCUd/6eJfdJS8Y84r1dKwPx3IidaYxC9pQmsw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1740965b-99ef-4bf3-9ecf-3bc41594d6e7",
                            TeamId = 3,
                            TwoFactorEnabled = false,
                            UserName = "volkswagen@example.com"
                        },
                        new
                        {
                            Id = "1330127f-992d-4f97-a7e7-c5da789e1a8d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2effe710-f8e2-4823-8706-3686c02a633f",
                            Email = "toyota@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "TOYOTA@EXAMPLE.COM",
                            NormalizedUserName = "TOYOTA@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEEHAsIJWblVCP137Rc3yxk5q2XaUGH3zHpRoo+MSrSg4J6i2lLwbb5JWCYuxChoCHg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "15a282fe-f2c5-43e6-9ce5-56d4ae8c16f1",
                            TeamId = 3,
                            TwoFactorEnabled = false,
                            UserName = "toyota@example.com"
                        },
                        new
                        {
                            Id = "e4ddcc25-0347-4fcf-b9e3-6d0b2b0d46b4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6498001b-0691-4641-a2ea-2d8ff2ef06b4",
                            Email = "ferrari@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "FERRARI@EXAMPLE.COM",
                            NormalizedUserName = "FERRARI@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEMzmVKo1ZAdqQEUONEv3gSWgzKKWDR7EsFC66D2g5t/X3/TzYyGmlTazamrEZaeWSg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "23178080-55c8-4269-bde2-40f49b35efd8",
                            TeamId = 3,
                            TwoFactorEnabled = false,
                            UserName = "ferrari@example.com"
                        },
                        new
                        {
                            Id = "725f5207-aec0-44e5-b8b9-450431f597e2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0f0dc2f0-4fe4-4b4c-9043-0638defdda62",
                            Email = "mercedes@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "MERCEDES@EXAMPLE.COM",
                            NormalizedUserName = "MERCEDES@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEK+JcoJCv+kk9r5OTHWwM5fcpJZS5E/wr9DnaMqTGaZnfXKEJel61v1xHjkrkE+SQg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "580d33b3-0107-4a95-bf65-b371fb3915ec",
                            TeamId = 3,
                            TwoFactorEnabled = false,
                            UserName = "mercedes@example.com"
                        },
                        new
                        {
                            Id = "b8dee8b7-d481-44c0-88d1-5af0f0ec184f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "31abd755-9601-4f93-9ab9-283316504ab4",
                            Email = "bruce@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "BRUCE@EXAMPLE.COM",
                            NormalizedUserName = "BRUCE@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEBgENgD5AKIOo1ROk59FgK2HMj8RzOrbP0+k/cEFv98aVa9h3sxLjzJEC5uNYs0W6w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "919fccd2-d972-42e9-b367-4a44193d4f28",
                            TeamId = 4,
                            TwoFactorEnabled = false,
                            UserName = "bruce@example.com"
                        },
                        new
                        {
                            Id = "a4667b77-394a-466c-8a3e-8c6acbd29e79",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7eecbd48-4da3-479a-8f11-b93d70244343",
                            Email = "mcqueen@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "MCQUEEN@EXAMPLE.COM",
                            NormalizedUserName = "MCQUEEN@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEBYXLbgEygurnVG4XkvvY8qmImtqGTeLyWS40gxGSfK9bnR0hds4hBUbCvWhQ9c5hg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "47a58e05-cc32-4d3e-9a6e-1da099a60c0d",
                            TeamId = 5,
                            TwoFactorEnabled = false,
                            UserName = "mcqueen@example.com"
                        },
                        new
                        {
                            Id = "919167f2-397e-42ea-9496-417fc46ffd43",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e8b5fc9e-1b96-4937-93b0-50c52c761850",
                            Email = "mack@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "MACK@EXAMPLE.COM",
                            NormalizedUserName = "MACK@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAENR9cZO6vchFvCZc6dMCi90vAMmj11nGHs/gvYicmfgYco+znIaNhNq22wVJKyFJKQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3ad5740f-aee7-482e-af2d-97cd343bbe4c",
                            TeamId = 5,
                            TwoFactorEnabled = false,
                            UserName = "mack@example.com"
                        },
                        new
                        {
                            Id = "b16f4d32-fdd5-4bb3-b653-e75f3b8d0fe1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1f55439e-820d-4e62-8c78-c3a31838febd",
                            Email = "rusty@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "RUSTY@EXAMPLE.COM",
                            NormalizedUserName = "RUSTY@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEMdvLe/c5EL2/FoWuy739T3EncrKAl//7YtaEHK39imifEfj6Ic0QkXhEHJgidHagA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e4cb95c2-2a04-49ab-80e1-f64b1a2e1a62",
                            TeamId = 5,
                            TwoFactorEnabled = false,
                            UserName = "rusty@example.com"
                        },
                        new
                        {
                            Id = "42306058-8133-4489-8d6e-d0a3a47f56ab",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bb5a17c9-dc6b-42f9-a65a-ae8ffd103659",
                            Email = "dusty@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "DUSTY@EXAMPLE.COM",
                            NormalizedUserName = "DUSTY@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEAvNLLN5dj33IMFDfSXcBlbl8fqWBhk7vZLLZpA7MnFEKTSL2z35MYnw9Z3otT/Plg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "460a842b-103d-42aa-9d2d-cb90b61ec713",
                            TeamId = 5,
                            TwoFactorEnabled = false,
                            UserName = "dusty@example.com"
                        },
                        new
                        {
                            Id = "ae3750a4-d8a7-4736-bba5-dd009c8c151a",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8ec71a63-1489-4d01-a7da-3595f12c3fcd",
                            Email = "banaan@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "BANAAN@EXAMPLE.COM",
                            NormalizedUserName = "BANAAN@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEDVFxHWj0Ll/9/pWxQL8gAiDATAnx9smWqT4fflqmY8GCaNX3b8HcV6oy9Jn7Si8Ng==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3da84adf-cded-4162-a752-60236e44ec82",
                            TeamId = 6,
                            TwoFactorEnabled = false,
                            UserName = "banaan@example.com"
                        },
                        new
                        {
                            Id = "1545a0b8-e0e1-4dac-9eba-735ac4cb4042",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9ef77e92-f03f-4363-a56e-4578b91cbe0a",
                            Email = "citroen@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "CITROEN@EXAMPLE.COM",
                            NormalizedUserName = "CITROEN@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAELWlVYbKrtNR9ed7E4f5REefBpFXF/vlZnY0aeWfeDMnlftICiPQ932IxUayzNq8qA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a7ad2074-e607-4f56-9353-9b254cdf5bc6",
                            TeamId = 6,
                            TwoFactorEnabled = false,
                            UserName = "citroen@example.com"
                        },
                        new
                        {
                            Id = "410470a6-26a7-47f2-9d26-6f6c176ea357",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "762d0132-0de8-4aaf-8ab2-e7dfaf2bf533",
                            Email = "sinaasappel@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "SINAASAPPEL@EXAMPLE.COM",
                            NormalizedUserName = "SINAASAPPEL@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEJs01TJQAvy/MTp7cat7x8QKJyqJexHQyag6eKECWIcsC8lx+RHB1eWLbXBqohHGAg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3c0c08a0-33e8-428a-95f7-a217f8e9eeae",
                            TeamId = 6,
                            TwoFactorEnabled = false,
                            UserName = "sinaasappel@example.com"
                        },
                        new
                        {
                            Id = "a350a181-c8bc-4f52-8903-9534953d4a40",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "811dfb6c-f0e2-4747-9e52-edc67c8c4464",
                            Email = "watermeloen@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "WATERMELOEN@EXAMPLE.COM",
                            NormalizedUserName = "WATERMELOEN@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAED0XLCVXqOt3lmWizFGDcZBwE2G0YBuKNERx5nKfOi/74WX023l7X8/TLhpSEDTSCA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f2e63120-5bdd-49f6-9ca0-57e46e378326",
                            TeamId = 6,
                            TwoFactorEnabled = false,
                            UserName = "watermeloen@example.com"
                        },
                        new
                        {
                            Id = "dbc52551-ec21-46ec-90e1-7e75ab64d089",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "673b4232-c1c2-4f7f-964a-b5e17883deeb",
                            Email = "appel@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "APPEL@EXAMPLE.COM",
                            NormalizedUserName = "APPEL@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEBzisrhkDEKt3+U0KzDq83Ww6OTy2/WTVxInBoQ2f8nj84ZvyXciAJN4SPg3raHCGw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a342ed7f-e8eb-4362-93a0-37b8ac8c08ba",
                            TeamId = 6,
                            TwoFactorEnabled = false,
                            UserName = "appel@example.com"
                        },
                        new
                        {
                            Id = "bc428bda-dc33-43fc-8330-4d8e7a9c2d8e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "af4cdf1e-083b-4c5a-85e5-845b147e86a0",
                            Email = "peer@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "PEER@EXAMPLE.COM",
                            NormalizedUserName = "PEER@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEMIwjq7MvmAnAIL/Tfk2toLDtTxzvMSH1o08M6w3Ld2s/SDP+qMTYwwfkYGazGVx9Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9f3fd28a-55a7-4a74-b3fb-1283c489ed47",
                            TeamId = 6,
                            TwoFactorEnabled = false,
                            UserName = "peer@example.com"
                        },
                        new
                        {
                            Id = "8b975c33-7336-4dca-97ad-eb2c1a131c8b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "72e38ccb-4ffc-48eb-b091-7c8b1b08c73e",
                            Email = "kiwi@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "KIWI@EXAMPLE.COM",
                            NormalizedUserName = "KIWI@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEEw7MZDcAzCFLT+JFvaAi6LZEUfyrao1bUDfOVzUlpn4jZ5CE3cplw1oyXZpDUDDaw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "cd399d24-2d78-42f4-938b-393e4428a788",
                            TeamId = 6,
                            TwoFactorEnabled = false,
                            UserName = "kiwi@example.com"
                        },
                        new
                        {
                            Id = "7ba74b3f-e654-4311-b009-c989c0abc7fe",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f9cc86cb-c1dd-4ce3-a4ca-fd9a75b1acd8",
                            Email = "avocado@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "AVOCADO@EXAMPLE.COM",
                            NormalizedUserName = "AVOCADO@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEHdnno2Sx/XU7E3CWgAv4u6LAht80V8TZJXHjThRTLpydo5WoICTNxBC2kXchUJeZg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "069ad08f-5271-4330-baa2-719edea0dc46",
                            TeamId = 6,
                            TwoFactorEnabled = false,
                            UserName = "avocado@example.com"
                        },
                        new
                        {
                            Id = "71b78288-e744-475c-84f0-03ae0a7c5357",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3a7dab78-548f-4187-8082-de63161b4a23",
                            Email = "waterzwijn@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "WATERZWIJN@EXAMPLE.COM",
                            NormalizedUserName = "WATERZWIJN@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEHrnJlBedXTcTkw1oQZoCQEDo6z79h06gaqArkwRyQcdGUiVtFXdjrAiPCJkZbGA2g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "36c40335-b774-4e6f-bb1f-ea65f3568760",
                            TeamId = 7,
                            TwoFactorEnabled = false,
                            UserName = "waterzwijn@example.com"
                        },
                        new
                        {
                            Id = "c4d2912e-415e-4c5c-b3bb-636b5226ef3a",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "64bb0c83-36a3-47cf-a7c2-1b29393096de",
                            Email = "huiskat@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "HUISKAT@EXAMPLE.COM",
                            NormalizedUserName = "HUISKAT@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEHYnalmbtZXQCzZtzMOqhMCrEzqqqso18bkCP/uqqv5ZXSY1PV3HeDkwVeZPtkoq+g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f6b35b92-e4ce-4fae-a654-8b6d4a18ee38",
                            TeamId = 7,
                            TwoFactorEnabled = false,
                            UserName = "huiskat@example.com"
                        },
                        new
                        {
                            Id = "ce2c9539-676e-4b90-a3a8-2bed66747224",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f60734fe-27ed-43fb-a7d1-b593cbe23b6e",
                            Email = "hyena@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "HYENA@EXAMPLE.COM",
                            NormalizedUserName = "HYENA@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEO/uHNyRlO3eiO35NG1N9AOUmSJw4/+FvU22D2vHuQI2YXGTbUvjnIS7y9CnJwGveQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "252623dc-f3ee-4bd8-9c63-796da38392fb",
                            TeamId = 7,
                            TwoFactorEnabled = false,
                            UserName = "hyena@example.com"
                        });
                });

            modelBuilder.Entity("CTFTournamentPlanner.Models.Round", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BracketId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BracketId");

                    b.ToTable("Rounds");
                });

            modelBuilder.Entity("CTFTournamentPlanner.Models.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Teams");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Gewoon buitenaards goed!",
                            Name = "Planeten"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Wij zijn de betere auto's. Wij rijden niet alleen, wij vliegen naar de overwinning!",
                            Name = "Flip Reset"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Waarom zou je naar de overwinning rennen als je naar de overwinning kunt rijden?",
                            Name = "Auto"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Onze prestaties zijn te allen tijde vlekkeloos!",
                            Name = "Vlekkeloos"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Ka-chow!",
                            Name = "Rusteze"
                        },
                        new
                        {
                            Id = 6,
                            Description = "Zoet of zuur, wij winnen elk uur!",
                            Name = "Fruit"
                        },
                        new
                        {
                            Id = 7,
                            Description = "Wij rennen naar de overwinning!",
                            Name = "Vierpoten"
                        });
                });

            modelBuilder.Entity("MatchupTeam", b =>
                {
                    b.Property<int>("MatchupsId")
                        .HasColumnType("int");

                    b.Property<int>("TeamsId")
                        .HasColumnType("int");

                    b.HasKey("MatchupsId", "TeamsId");

                    b.HasIndex("TeamsId");

                    b.ToTable("MatchupTeam");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "e0f4adb4-8c3d-45ff-a814-62c3c873fba5",
                            Name = "Administrators",
                            NormalizedName = "ADMINISTRATORS"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "372725a0-0897-4dd1-a77a-0f9cce9ca7ad",
                            RoleId = "e0f4adb4-8c3d-45ff-a814-62c3c873fba5"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("BracketTeam", b =>
                {
                    b.HasOne("CTFTournamentPlanner.Models.Bracket", null)
                        .WithMany()
                        .HasForeignKey("BracketsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CTFTournamentPlanner.Models.Team", null)
                        .WithMany()
                        .HasForeignKey("TeamsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CTFTournamentPlanner.Models.Matchup", b =>
                {
                    b.HasOne("CTFTournamentPlanner.Models.Round", "Round")
                        .WithMany("Matchups")
                        .HasForeignKey("RoundId");

                    b.Navigation("Round");
                });

            modelBuilder.Entity("CTFTournamentPlanner.Models.Player", b =>
                {
                    b.HasOne("CTFTournamentPlanner.Models.Team", "Team")
                        .WithMany("Players")
                        .HasForeignKey("TeamId");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("CTFTournamentPlanner.Models.Round", b =>
                {
                    b.HasOne("CTFTournamentPlanner.Models.Bracket", null)
                        .WithMany("Rounds")
                        .HasForeignKey("BracketId");
                });

            modelBuilder.Entity("MatchupTeam", b =>
                {
                    b.HasOne("CTFTournamentPlanner.Models.Matchup", null)
                        .WithMany()
                        .HasForeignKey("MatchupsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CTFTournamentPlanner.Models.Team", null)
                        .WithMany()
                        .HasForeignKey("TeamsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("CTFTournamentPlanner.Models.Player", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("CTFTournamentPlanner.Models.Player", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CTFTournamentPlanner.Models.Player", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("CTFTournamentPlanner.Models.Player", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CTFTournamentPlanner.Models.Bracket", b =>
                {
                    b.Navigation("Rounds");
                });

            modelBuilder.Entity("CTFTournamentPlanner.Models.Round", b =>
                {
                    b.Navigation("Matchups");
                });

            modelBuilder.Entity("CTFTournamentPlanner.Models.Team", b =>
                {
                    b.Navigation("Players");
                });
#pragma warning restore 612, 618
        }
    }
}
