// <auto-generated />
using System;
using CTFTournamentPlanner.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CTFTournamentPlanner.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20231019112318_TroubleShootingMatchupEdit2")]
    partial class TroubleShootingMatchupEdit2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BracketTeam", b =>
                {
                    b.Property<int>("BracketsId")
                        .HasColumnType("int");

                    b.Property<int>("TeamsId")
                        .HasColumnType("int");

                    b.HasKey("BracketsId", "TeamsId");

                    b.HasIndex("TeamsId");

                    b.ToTable("BracketTeam");
                });

            modelBuilder.Entity("CTFTournamentPlanner.Models.Bracket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsGenerated")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Brackets");
                });

            modelBuilder.Entity("CTFTournamentPlanner.Models.Matchup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("RoundId")
                        .HasColumnType("int");

                    b.Property<int?>("ScoreA")
                        .HasColumnType("int");

                    b.Property<int?>("ScoreB")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoundId");

                    b.ToTable("Matchups");
                });

            modelBuilder.Entity("CTFTournamentPlanner.Models.Player", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTeamLeader")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TeamId")
                        .HasColumnType("int");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("TeamId");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "372725a0-0897-4dd1-a77a-0f9cce9ca7ad",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ae8b504c-8165-4598-8061-f60a2034ea23",
                            Email = "admin@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@EXAMPLE.COM",
                            NormalizedUserName = "ADMIN@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEK1I1wC4aMlpvEJZecqHW8Oc3RSmMGuFnfkuv7L9iljONcCNb47FjGCFt7RYQgdIiQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "817949b9-65c6-438f-b91f-c1361c8366fc",
                            TwoFactorEnabled = false,
                            UserName = "admin@example.com"
                        },
                        new
                        {
                            Id = "8c7c6203-51ae-419b-8690-438d2bcab662",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "14a69618-c571-4018-8be7-0a451a87bf2f",
                            Email = "aarde@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "AARDE@EXAMPLE.COM",
                            NormalizedUserName = "AARDE@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEG/biFJ/kJe+vLK5Jt2Mt9rovcc+u1B5ruTrQSzIUNOe9mOKf2AU1ygR9C4x54i+DA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "22c506f4-994f-4ba3-8f52-ba3f91b0085d",
                            TeamId = 1,
                            TwoFactorEnabled = false,
                            UserName = "aarde@example.com"
                        },
                        new
                        {
                            Id = "7b912671-be09-4859-b8de-7cdadeb28243",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d55e8340-2694-4034-af1a-8a5f3eb03468",
                            Email = "mars@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "MARS@EXAMPLE.COM",
                            NormalizedUserName = "MARS@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAED82deZoBKrKxZEtX7GEpHSs5hxsdAOvZQwHKupzQBkm3aN7KVv4PIeRctubqn5ItQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7a70cf14-ce16-471f-ad45-9870e28dc74b",
                            TeamId = 1,
                            TwoFactorEnabled = false,
                            UserName = "mars@example.com"
                        },
                        new
                        {
                            Id = "bd0b4020-1939-474d-aad8-97a350037e96",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1d6e9962-eb25-4a32-8f14-01dc5c11c226",
                            Email = "venus@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "VENUS@EXAMPLE.COM",
                            NormalizedUserName = "VENUS@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEI3QCyiU0Kq/OYa6EQY0c0qhK9Yyi8mpJ0iY3jue+UuiHouwA89bHibKWu2uFq2c2w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f9e93810-8576-435d-8fea-ff777e8a57ce",
                            TeamId = 1,
                            TwoFactorEnabled = false,
                            UserName = "venus@example.com"
                        },
                        new
                        {
                            Id = "3e88e74e-1ab2-42e4-8e7d-b8575fef78a8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fbd1e151-aa26-438a-aebb-f253b12ea33e",
                            Email = "mercurius@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "MERCURIUS@EXAMPLE.COM",
                            NormalizedUserName = "MERCURIUS@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAENRI3UBLEn7uozQtfq8hce7y/N3v1p0+EzGZcOgck3C4EDE90siOUJDHRKeLs2x02w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "574fa834-8273-462f-ae90-b4bacb72e7fd",
                            TeamId = 1,
                            TwoFactorEnabled = false,
                            UserName = "mercurius@example.com"
                        },
                        new
                        {
                            Id = "ae609a81-db19-4453-aa8b-16a85b4bf26d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "211bfe81-70a7-4c30-b230-539fd836f7d9",
                            Email = "uranus@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "URANUS@EXAMPLE.COM",
                            NormalizedUserName = "URANUS@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEFzn0wMtFvczwuexELgYYS9a4TdOI9e0sdF5EUQNQj9Lu75HMpGf4Kgd6LLGh6Xi/w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "897704a5-a2b4-44e2-8f1a-540d4e8da3f6",
                            TeamId = 1,
                            TwoFactorEnabled = false,
                            UserName = "uranus@example.com"
                        },
                        new
                        {
                            Id = "ac0ea0b3-e6b1-44a6-b279-7ac0573a0601",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "639fc921-3af2-4659-9219-099212f0902d",
                            Email = "neptunes@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "NEPTUNES@EXAMPLE.COM",
                            NormalizedUserName = "NEPTUNES@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEFVL/p4lH3Ln+GVBdu6NNd/YCY5pLYSChCNU/Y9QT0rrvl7Vvjle1lWsUdo8jIdWgA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "83c06252-50cc-40c0-848a-c1ad55aad3bc",
                            TeamId = 1,
                            TwoFactorEnabled = false,
                            UserName = "neptunes@example.com"
                        },
                        new
                        {
                            Id = "be3a08d1-c300-4625-82c3-cd211abf13c8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5043ea1d-29e4-445d-8f04-85ee5103d3e8",
                            Email = "saturnus@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "SATURNUS@EXAMPLE.COM",
                            NormalizedUserName = "SATURNUS@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEF9hEuBCP66BHQuMO5PvKN0LvXd/fqFLzO50Rn08mb/Qc/UTHIU3oUdxzGSTqg7o3w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "00eea2e0-49af-4178-a93c-d8e84f07fc2a",
                            TeamId = 1,
                            TwoFactorEnabled = false,
                            UserName = "saturnus@example.com"
                        },
                        new
                        {
                            Id = "e5e257e1-7aa7-45af-98cc-60fbad7949d8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "32f3f172-ea3d-4916-9d92-9dc0d0c044fd",
                            Email = "jupiter@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "JUPITER@EXAMPLE.COM",
                            NormalizedUserName = "JUPITER@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEJApbxDBmlGi+tP5toqTt4Z5SoDjjZm2c4e54DKHup+7YnLRwBYd3qaKZB+QH0RqiA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3d74808b-8d41-45c3-a24a-9ccd90972610",
                            TeamId = 1,
                            TwoFactorEnabled = false,
                            UserName = "jupiter@example.com"
                        },
                        new
                        {
                            Id = "a915374f-721f-4be1-95f6-fc0e5d3b799f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "110d128e-7435-4257-8b02-930f189b0f8f",
                            Email = "octane@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "OCTANE@EXAMPLE.COM",
                            NormalizedUserName = "OCTANE@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAECjr1WMUNxBJtouWKrsElsYBXa6WX0u7vGXN+gpAkXhnrCQ7wKhhNWyrkDtz4/xVyA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7bbf297b-fc01-4e26-8ac3-47a192c35247",
                            TeamId = 2,
                            TwoFactorEnabled = false,
                            UserName = "octane@example.com"
                        },
                        new
                        {
                            Id = "ac024914-fa00-4dae-bb6d-ec7db00910a7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2c621400-fc31-4deb-9a0e-b2f14a9b3291",
                            Email = "breakout@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "BREAKOUT@EXAMPLE.COM",
                            NormalizedUserName = "BREAKOUT@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEP8o1nAykPMWZV5aFG2XMKKE/UaP1xR+6s7xEaO9i1ILz96R7lpRhyvw5ZWb65Y0aA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "57bd36f0-c220-450f-8c32-ca91f28c83e3",
                            TeamId = 2,
                            TwoFactorEnabled = false,
                            UserName = "breakout@example.com"
                        },
                        new
                        {
                            Id = "793972d6-548a-450a-b5b2-e04e7582f2c0",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c78f76ff-d490-46ee-ae64-e8cc1f15b0a6",
                            Email = "dominus@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "DOMINUS@EXAMPLE.COM",
                            NormalizedUserName = "DOMINUS@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEIQ2aSHo08k+kXS63NnXWImpwE3drWyg4N4zRt+3pUGkicNj0FyGB1ZMWDXoATLuKg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "018ef6bd-545c-45ae-9333-5a1e1fc591a3",
                            TeamId = 2,
                            TwoFactorEnabled = false,
                            UserName = "dominus@example.com"
                        },
                        new
                        {
                            Id = "c78d4929-c4c9-48d3-8940-3319f6f2f212",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8a9acf65-76e7-4718-952c-30f95b56d16b",
                            Email = "fennec@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "FENNEC@EXAMPLE.COM",
                            NormalizedUserName = "FENNEC@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEPDDnNeXLH9CqKOjQbSvrNBNbhZFiYRH8fXzol4VukKwUW3+jPZSu1e2A0qUV4gQBA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a0f800ee-2124-46cd-86a5-8a5d63d3d46b",
                            TeamId = 2,
                            TwoFactorEnabled = false,
                            UserName = "fennec@example.com"
                        },
                        new
                        {
                            Id = "d5e7bd31-3a98-4da3-b2e9-bf119687a561",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d9dcbba3-8b38-4d20-8666-d36d31f71b54",
                            Email = "volvo@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "VOLVO@EXAMPLE.COM",
                            NormalizedUserName = "VOLVO@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEC2V5aZ4O28v30RHwsXEIkXUst4+j1AaBu7fcTxomL8t8GwcRpXOmag+eFNWyWo7wQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "86c29e78-3af8-4b72-a123-c777610ea8a4",
                            TeamId = 3,
                            TwoFactorEnabled = false,
                            UserName = "volvo@example.com"
                        },
                        new
                        {
                            Id = "09d6e204-011f-46ca-b685-72ad59b79b1b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e4322a68-a5e1-4bec-ae42-6cf13e9e4278",
                            Email = "volkswagen@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "VOLKSWAGEN@EXAMPLE.COM",
                            NormalizedUserName = "VOLKSWAGEN@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEE+GnpODX1LwQeJjfWqtmsTQoH80jcAqkeTsAd1hhe0buBNRGZzv4yPLe/4D+E2vKg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "bb13de09-bd8c-46b5-bff4-9496707a88c8",
                            TeamId = 3,
                            TwoFactorEnabled = false,
                            UserName = "volkswagen@example.com"
                        },
                        new
                        {
                            Id = "e2de1305-221a-44b9-a1dd-baecec678de4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5b572527-c89a-419b-a600-aa8ec1db8f85",
                            Email = "toyota@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "TOYOTA@EXAMPLE.COM",
                            NormalizedUserName = "TOYOTA@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEKqggQpBQVbyjKWVN3pHuQmul6u7vUtozN6wloi369R2XQrkz86QRnQRH386o1Lg4g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f82ae762-10dc-4ebb-9234-4cc31451743a",
                            TeamId = 3,
                            TwoFactorEnabled = false,
                            UserName = "toyota@example.com"
                        },
                        new
                        {
                            Id = "c03ab19c-619c-41ac-ac13-b25515b6fe20",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "66e89053-8300-40b8-9902-36b1a8f145de",
                            Email = "ferrari@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "FERRARI@EXAMPLE.COM",
                            NormalizedUserName = "FERRARI@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEOVs43YEsIOvKmuUbBcD+b7z9paqJe+piJqTCth+Re7VTK7Tsms2mOT4uxlGlPy4Uw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9de4e4da-478e-45f8-a357-676515ab4a2a",
                            TeamId = 3,
                            TwoFactorEnabled = false,
                            UserName = "ferrari@example.com"
                        },
                        new
                        {
                            Id = "3302e424-3acc-4f1e-9db9-0d387cc31077",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "27f89f03-c6ee-4148-b879-c7a9aed4dfcf",
                            Email = "mercedes@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "MERCEDES@EXAMPLE.COM",
                            NormalizedUserName = "MERCEDES@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEHQQQsKEXCo1Ca+DXGKST89M+9SDfzbckv4qio8X+B0Y7pzASFlL38YTAgM5ozyClw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9ca13263-6238-434b-b50f-9253b86a84f5",
                            TeamId = 3,
                            TwoFactorEnabled = false,
                            UserName = "mercedes@example.com"
                        },
                        new
                        {
                            Id = "0565e62b-8063-4d9d-ac83-39b7502d74ed",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5165d5e3-4d51-4b58-8ece-55eccb5b492c",
                            Email = "bruce@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "BRUCE@EXAMPLE.COM",
                            NormalizedUserName = "BRUCE@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEEVUeq8RSyYE8ZUNtHM0ASwE3cuWZO+BYNg8uj282wmUJyKHcjC40x+gXcRq7A5rrg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5ee504c5-a666-470c-a936-46c83f79b8be",
                            TeamId = 4,
                            TwoFactorEnabled = false,
                            UserName = "bruce@example.com"
                        },
                        new
                        {
                            Id = "e48f2aa9-947b-4108-bc72-4ef06aa3925b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "39a8dcf5-3418-4831-8559-3906f2bc3df5",
                            Email = "mcqueen@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "MCQUEEN@EXAMPLE.COM",
                            NormalizedUserName = "MCQUEEN@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEBKqkCxE57+4GB9dHs69xgPs5o8o9wAieqCY3v0S4DfO8ocGJ34+Y50wmeerDsZrbg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "521c470c-df6b-4397-acbe-a92a1a7d763f",
                            TeamId = 5,
                            TwoFactorEnabled = false,
                            UserName = "mcqueen@example.com"
                        },
                        new
                        {
                            Id = "5f7f23a9-5542-4485-9a1e-d273a865af84",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "830e96db-c919-4e00-bac4-3e57ad49e33d",
                            Email = "mack@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "MACK@EXAMPLE.COM",
                            NormalizedUserName = "MACK@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEG3/pldMFfO3dN7bpAKZfUJd7583VEJ+WTHLEZHdh8bfWLQdoIhzfs8RfDmi3HDYnA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6351395d-4334-4148-ad30-55a2bc818a47",
                            TeamId = 5,
                            TwoFactorEnabled = false,
                            UserName = "mack@example.com"
                        },
                        new
                        {
                            Id = "f8f7ca46-e8ea-4081-8f0b-129358bf8c3e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "01ca3fa4-0ceb-4882-8fbd-6ff45b2d108c",
                            Email = "rusty@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "RUSTY@EXAMPLE.COM",
                            NormalizedUserName = "RUSTY@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEP6N2GSJ6WMFS3n9uRtdRytdC2pN6IZwkRzCvFCAwh4cTcJTuqUd/PccnKhcg6HNlQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "82dedda1-fb71-4634-b159-c946ccdd5527",
                            TeamId = 5,
                            TwoFactorEnabled = false,
                            UserName = "rusty@example.com"
                        },
                        new
                        {
                            Id = "750d68fe-0e88-41c4-bdb8-45e3f32d8b0b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9a329aac-c27b-4f38-b49b-e3b122615c35",
                            Email = "dusty@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "DUSTY@EXAMPLE.COM",
                            NormalizedUserName = "DUSTY@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEAEpMh65qnYQ3SK4BV/CpabhFsNqA+8BFLPHTNphbbKkaLZPsOY4u+jfOa2meR0hXw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "45e79172-ec51-49bf-8aa9-a99a854aa283",
                            TeamId = 5,
                            TwoFactorEnabled = false,
                            UserName = "dusty@example.com"
                        },
                        new
                        {
                            Id = "47ec8d2e-16a7-4f69-9ec6-4d065fc99f03",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c69bbb0c-7a7e-42ad-99fc-046e48e36832",
                            Email = "banaan@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "BANAAN@EXAMPLE.COM",
                            NormalizedUserName = "BANAAN@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEEEacAEcaFuBMdQrmyRoQiAVshPNjlwemwho2ViLERE+/Oqus9JAirgLWdNvK66AvA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b6715c4a-9fdc-43d5-9b61-536364fe27f1",
                            TeamId = 6,
                            TwoFactorEnabled = false,
                            UserName = "banaan@example.com"
                        },
                        new
                        {
                            Id = "71afefaf-e0a7-4f68-815c-8749ca6d2eec",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "43f5a63a-0604-45e8-8938-12be2df16e8c",
                            Email = "citroen@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "CITROEN@EXAMPLE.COM",
                            NormalizedUserName = "CITROEN@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEPHMPI0npWykrtGy0fxxdVvhdsavCrrWjeIvhtpQn5+iQfjYv7dLI8HJw/eKhuxgSg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9fc695db-f528-4933-9c2a-7154fb45759a",
                            TeamId = 6,
                            TwoFactorEnabled = false,
                            UserName = "citroen@example.com"
                        },
                        new
                        {
                            Id = "a804a448-64db-4229-a436-eaa16f537250",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8b5a8c3c-fb1a-49c2-b727-5c77ba1cc0df",
                            Email = "sinaasappel@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "SINAASAPPEL@EXAMPLE.COM",
                            NormalizedUserName = "SINAASAPPEL@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEMlso90bAlozBb+hizIBDiMSoUNbZp5gHAIFL3fXRYIvA3rZSgIomO5vuEgs87Aurw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "476c9736-0f68-4145-a066-b67cc17584f7",
                            TeamId = 6,
                            TwoFactorEnabled = false,
                            UserName = "sinaasappel@example.com"
                        },
                        new
                        {
                            Id = "bbd0301a-b0fa-453d-88df-eaa3b9a871c3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7e1725da-493a-427c-a279-be647cedefd0",
                            Email = "watermeloen@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "WATERMELOEN@EXAMPLE.COM",
                            NormalizedUserName = "WATERMELOEN@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEE2R7p4EhUga7aesIf6lD3/3dngdS+PUQ2u7KJWKQUd2sXhRWjpr0+tvH8dK4yWa/g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2b3ef6c1-bab2-4032-99c4-09df11f2f596",
                            TeamId = 6,
                            TwoFactorEnabled = false,
                            UserName = "watermeloen@example.com"
                        },
                        new
                        {
                            Id = "3ee4afef-2e4e-410a-b2d9-ffdd4ce95103",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "225a519e-8d2a-423b-b3ef-61a11778e041",
                            Email = "appel@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "APPEL@EXAMPLE.COM",
                            NormalizedUserName = "APPEL@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEDKsOO/dATuA5bgDU0mva6Qzd4oGzdW9gP9HrwiseG5uzKCQUVfessvw2cgNyG/xeA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "01957118-4918-489f-8546-99b1e7186c91",
                            TeamId = 6,
                            TwoFactorEnabled = false,
                            UserName = "appel@example.com"
                        },
                        new
                        {
                            Id = "463bf195-204b-4c91-a160-46d5ae67970d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9a917351-5609-449b-a0e7-1d8c806a4761",
                            Email = "peer@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "PEER@EXAMPLE.COM",
                            NormalizedUserName = "PEER@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEPxRc9n03IwAskO9VU+WD8w8Q+2K55cRxfOrXdbylhl5D5k8rfGxJ6h9T8fw5oPTEw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fe992055-24ab-4f27-9a2c-3102a81c6008",
                            TeamId = 6,
                            TwoFactorEnabled = false,
                            UserName = "peer@example.com"
                        },
                        new
                        {
                            Id = "b70841f6-3c30-4210-aedc-f7582171657c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9cde9a56-f560-45e0-99ca-c53a61ac998d",
                            Email = "kiwi@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "KIWI@EXAMPLE.COM",
                            NormalizedUserName = "KIWI@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEJavguMNL0jSr2VZyzjYtIwQ+DMPhXasCu8GKb/wcB6kRYlQRrqmjASWpP9G36qIZA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "579472e6-49f9-43da-b49d-8d7f7d6dc818",
                            TeamId = 6,
                            TwoFactorEnabled = false,
                            UserName = "kiwi@example.com"
                        },
                        new
                        {
                            Id = "ded386b5-7d81-40cf-9102-2e08a97e427c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6c31d6ec-22d5-46d6-b836-3158afc2b0dd",
                            Email = "avocado@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "AVOCADO@EXAMPLE.COM",
                            NormalizedUserName = "AVOCADO@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEM0u6UKxN/AusYaAWaJVtnPgfl/V9pOFimBGZztpBQXGtkqm7gOx2nx8gvjP69bggA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "86c32ad0-f3d1-43a9-af72-bef5b87ebbe2",
                            TeamId = 6,
                            TwoFactorEnabled = false,
                            UserName = "avocado@example.com"
                        },
                        new
                        {
                            Id = "1a9922ec-f85c-4453-a445-cca91076641e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e3443186-8bc3-47b0-a314-128656372ff3",
                            Email = "waterzwijn@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "WATERZWIJN@EXAMPLE.COM",
                            NormalizedUserName = "WATERZWIJN@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEEFKUMACdFwAKKAPiGUIVqthJtb8IwQUSXlvvQMi+Fwuiqwmu5zCO+EpbnRLnSjThA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1fede5db-9cfe-476d-8faf-2125fe5a278b",
                            TeamId = 7,
                            TwoFactorEnabled = false,
                            UserName = "waterzwijn@example.com"
                        },
                        new
                        {
                            Id = "17f5480e-17c2-4810-9983-c065148bd8f9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "20451d79-b1e3-446f-9335-da3601131b6b",
                            Email = "huiskat@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "HUISKAT@EXAMPLE.COM",
                            NormalizedUserName = "HUISKAT@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEGb92lvAIRQVuOOxt8MhvlbDxg3hQC038T3PmUE8ilr5/aS32EovDpF1AQ1sTtVIkg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c6b04f51-0d76-44d1-b9ba-341ffd94a1b9",
                            TeamId = 7,
                            TwoFactorEnabled = false,
                            UserName = "huiskat@example.com"
                        },
                        new
                        {
                            Id = "00249f70-799e-4dfa-8d15-9485d25d6cc6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e6c26860-5fe7-43a0-9221-f5be45604a1e",
                            Email = "hyena@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "HYENA@EXAMPLE.COM",
                            NormalizedUserName = "HYENA@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEGuDz0deMSc0/Lo0ObE+r1KTCaFjswByBqOFkCFK7sDr4G/qUphGl/pM+JVQrILW+g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "277cfea3-ae12-411f-94fa-97934713337d",
                            TeamId = 7,
                            TwoFactorEnabled = false,
                            UserName = "hyena@example.com"
                        });
                });

            modelBuilder.Entity("CTFTournamentPlanner.Models.Round", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BracketId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BracketId");

                    b.ToTable("Rounds");
                });

            modelBuilder.Entity("CTFTournamentPlanner.Models.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Teams");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Gewoon buitenaards goed!",
                            Name = "Planeten"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Wij zijn de betere auto's. Wij rijden niet alleen, wij vliegen naar de overwinning!",
                            Name = "Flip Reset"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Waarom zou je naar de overwinning rennen als je naar de overwinning kunt rijden?",
                            Name = "Auto"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Onze prestaties zijn te allen tijde vlekkeloos!",
                            Name = "Vlekkeloos"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Ka-chow!",
                            Name = "Rusteze"
                        },
                        new
                        {
                            Id = 6,
                            Description = "Zoet of zuur, wij winnen elk uur!",
                            Name = "Fruit"
                        },
                        new
                        {
                            Id = 7,
                            Description = "Wij rennen naar de overwinning!",
                            Name = "Vierpoten"
                        });
                });

            modelBuilder.Entity("MatchupTeam", b =>
                {
                    b.Property<int>("MatchupsId")
                        .HasColumnType("int");

                    b.Property<int>("TeamsId")
                        .HasColumnType("int");

                    b.HasKey("MatchupsId", "TeamsId");

                    b.HasIndex("TeamsId");

                    b.ToTable("MatchupTeam");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "e0f4adb4-8c3d-45ff-a814-62c3c873fba5",
                            Name = "Administrators",
                            NormalizedName = "ADMINISTRATORS"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "372725a0-0897-4dd1-a77a-0f9cce9ca7ad",
                            RoleId = "e0f4adb4-8c3d-45ff-a814-62c3c873fba5"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("BracketTeam", b =>
                {
                    b.HasOne("CTFTournamentPlanner.Models.Bracket", null)
                        .WithMany()
                        .HasForeignKey("BracketsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CTFTournamentPlanner.Models.Team", null)
                        .WithMany()
                        .HasForeignKey("TeamsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CTFTournamentPlanner.Models.Matchup", b =>
                {
                    b.HasOne("CTFTournamentPlanner.Models.Round", "Round")
                        .WithMany("Matchups")
                        .HasForeignKey("RoundId");

                    b.Navigation("Round");
                });

            modelBuilder.Entity("CTFTournamentPlanner.Models.Player", b =>
                {
                    b.HasOne("CTFTournamentPlanner.Models.Team", "Team")
                        .WithMany("Players")
                        .HasForeignKey("TeamId");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("CTFTournamentPlanner.Models.Round", b =>
                {
                    b.HasOne("CTFTournamentPlanner.Models.Bracket", "Bracket")
                        .WithMany("Rounds")
                        .HasForeignKey("BracketId");

                    b.Navigation("Bracket");
                });

            modelBuilder.Entity("MatchupTeam", b =>
                {
                    b.HasOne("CTFTournamentPlanner.Models.Matchup", null)
                        .WithMany()
                        .HasForeignKey("MatchupsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CTFTournamentPlanner.Models.Team", null)
                        .WithMany()
                        .HasForeignKey("TeamsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("CTFTournamentPlanner.Models.Player", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("CTFTournamentPlanner.Models.Player", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CTFTournamentPlanner.Models.Player", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("CTFTournamentPlanner.Models.Player", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CTFTournamentPlanner.Models.Bracket", b =>
                {
                    b.Navigation("Rounds");
                });

            modelBuilder.Entity("CTFTournamentPlanner.Models.Round", b =>
                {
                    b.Navigation("Matchups");
                });

            modelBuilder.Entity("CTFTournamentPlanner.Models.Team", b =>
                {
                    b.Navigation("Players");
                });
#pragma warning restore 612, 618
        }
    }
}
