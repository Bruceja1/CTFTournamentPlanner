// <auto-generated />
using System;
using CTFTournamentPlanner.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CTFTournamentPlanner.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20231019100526_removedMaxLengthAttributes")]
    partial class removedMaxLengthAttributes
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BracketTeam", b =>
                {
                    b.Property<int>("BracketsId")
                        .HasColumnType("int");

                    b.Property<int>("TeamsId")
                        .HasColumnType("int");

                    b.HasKey("BracketsId", "TeamsId");

                    b.HasIndex("TeamsId");

                    b.ToTable("BracketTeam");
                });

            modelBuilder.Entity("CTFTournamentPlanner.Models.Bracket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsGenerated")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Brackets");
                });

            modelBuilder.Entity("CTFTournamentPlanner.Models.Matchup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("RoundId")
                        .HasColumnType("int");

                    b.Property<int?>("ScoreA")
                        .HasColumnType("int");

                    b.Property<int?>("ScoreB")
                        .HasColumnType("int");

                    b.Property<int?>("SelectedTeamAId")
                        .HasColumnType("int");

                    b.Property<int?>("SelectedTeamBId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoundId");

                    b.ToTable("Matchups");
                });

            modelBuilder.Entity("CTFTournamentPlanner.Models.Player", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTeamLeader")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TeamId")
                        .HasColumnType("int");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("TeamId");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "372725a0-0897-4dd1-a77a-0f9cce9ca7ad",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5f2a9865-dac2-49ee-9c88-d4a3e791fe15",
                            Email = "admin@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@EXAMPLE.COM",
                            NormalizedUserName = "ADMIN@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEM7SboH96hkktyrnNgzn0oMgqk9kV7vWWohMSNB6+EADDOdTsjdR/Z3Oi700iEL0ng==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "537ae362-92cc-4644-8c3e-984a3e24fd96",
                            TwoFactorEnabled = false,
                            UserName = "admin@example.com"
                        },
                        new
                        {
                            Id = "e9b8e143-b588-4b95-b74a-8e6ba60d1f60",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c64663da-890f-43ad-8da8-232987e2606e",
                            Email = "aarde@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "AARDE@EXAMPLE.COM",
                            NormalizedUserName = "AARDE@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEOaoF86G65dT8OKCBcwdcqrcioj7Uh6kHjXkZVCGaWsfMHNEpnNT0u9RfLQFDlAxGQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0b2e0ef5-7e47-4b81-9362-05b9be00379a",
                            TeamId = 1,
                            TwoFactorEnabled = false,
                            UserName = "aarde@example.com"
                        },
                        new
                        {
                            Id = "89293c68-0f63-40c7-9b37-4a0bc88c75cf",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cccfc633-8680-4253-8e4e-2051072f8629",
                            Email = "mars@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "MARS@EXAMPLE.COM",
                            NormalizedUserName = "MARS@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEOUu6ZxyxeqGWA6fikARTOBU2CNriE7ywGJ1pk4ZkfkTFSOWxFjAPraxHxvQnxUPyA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3f015c4c-c0dd-4c07-9027-bd98e963397c",
                            TeamId = 1,
                            TwoFactorEnabled = false,
                            UserName = "mars@example.com"
                        },
                        new
                        {
                            Id = "9df35493-5eac-429f-85e8-86ad701945fa",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7bc653bc-0cde-45de-a08f-d4220e25b767",
                            Email = "venus@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "VENUS@EXAMPLE.COM",
                            NormalizedUserName = "VENUS@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEIFmuhtLvHOHF0EoxOCiD/wm36rK5FDKvURpujRI+z4o+6XV998XG1S03nW9+P26MQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ef8e23b7-56bf-4fcd-ac97-6ff70726dd74",
                            TeamId = 1,
                            TwoFactorEnabled = false,
                            UserName = "venus@example.com"
                        },
                        new
                        {
                            Id = "502f931a-a881-4c65-811b-577a9950759b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "296bf938-17b5-4e71-807a-da2a9cb968b8",
                            Email = "mercurius@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "MERCURIUS@EXAMPLE.COM",
                            NormalizedUserName = "MERCURIUS@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEOKvhSqp9CfZs7br+gBl4Z9dLVJYcBmb2IlFaU/PP9h5mJlsJD9YT4bbKWHapdCDaw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "acb518b1-bba5-426f-94cf-000024c8f2b9",
                            TeamId = 1,
                            TwoFactorEnabled = false,
                            UserName = "mercurius@example.com"
                        },
                        new
                        {
                            Id = "319175ca-193d-4a00-a19a-835b93426f9b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2d64a8cc-6982-4686-87eb-8ebd9794c5c7",
                            Email = "uranus@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "URANUS@EXAMPLE.COM",
                            NormalizedUserName = "URANUS@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEPg7KMvpDNC5f/wW8phoMY1tXwZTXOLoP7O7AazTRP5S8xh9DUVqlYOyHqYhbbaHSw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ce8db92a-381f-4b8c-80f0-e08218b0c48b",
                            TeamId = 1,
                            TwoFactorEnabled = false,
                            UserName = "uranus@example.com"
                        },
                        new
                        {
                            Id = "3ef39bdc-7ef6-412a-884e-f7b61371a385",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cf208b1d-7a1e-4742-987f-f7ec9604421f",
                            Email = "neptunes@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "NEPTUNES@EXAMPLE.COM",
                            NormalizedUserName = "NEPTUNES@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEF49t9JpHQGdf6qMPqR8HLtXExCW/kgK8B7a1+24eohtx+KJcW4mWCF56+FWtLveXQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "aeecb8c2-f2ae-46b3-a19c-3cf1f3112230",
                            TeamId = 1,
                            TwoFactorEnabled = false,
                            UserName = "neptunes@example.com"
                        },
                        new
                        {
                            Id = "3bea9ea3-c8a3-4b26-a000-f8fd9aae5ab9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "dffc67c5-53b7-4704-8816-fcc2ceee5c61",
                            Email = "saturnus@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "SATURNUS@EXAMPLE.COM",
                            NormalizedUserName = "SATURNUS@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEGkCoZ2a+aDq4Az9BflRO8BdnTyxs4nR0NdOVGdMXyA6yzRwNoB/ZpXZEl+7ToE9lg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3ce02b1a-d347-4a00-9af3-3d352c7e4358",
                            TeamId = 1,
                            TwoFactorEnabled = false,
                            UserName = "saturnus@example.com"
                        },
                        new
                        {
                            Id = "2139f9bd-ab3a-4eda-9264-b2547f2e5f50",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ab86497b-88b7-4876-9a0b-dd864639b85d",
                            Email = "jupiter@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "JUPITER@EXAMPLE.COM",
                            NormalizedUserName = "JUPITER@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEMWMEpKHnb0/KTp0PJH9DQid8l721N44RCa7kc32NNhgUOYMlVSpwUl06omo+RLYFw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f5ca5796-c6c4-44e9-9043-8d973ff90287",
                            TeamId = 1,
                            TwoFactorEnabled = false,
                            UserName = "jupiter@example.com"
                        },
                        new
                        {
                            Id = "2ce8137e-7375-43be-aa65-6a8081e974dd",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "44ab2820-45f5-4f4d-81b9-ba5bc0f825c9",
                            Email = "octane@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "OCTANE@EXAMPLE.COM",
                            NormalizedUserName = "OCTANE@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEPBtuFGyFZSzMxnu06aDp9J+hh5RJuzzXmMKP3ORMANG5E5OrUaK0hxy546YsNeYkQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b92f9322-b067-48f7-931f-4edf544c857f",
                            TeamId = 2,
                            TwoFactorEnabled = false,
                            UserName = "octane@example.com"
                        },
                        new
                        {
                            Id = "43e6421a-808c-44c3-90bc-957305b6671f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8b9f8b4b-209e-4525-a109-9cda45fdcdbe",
                            Email = "breakout@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "BREAKOUT@EXAMPLE.COM",
                            NormalizedUserName = "BREAKOUT@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEPLM0fvsSrlvsct65UQUh63V0ljcgG5SXdpW0TlNnUb3BbeIVVAsWQ3Gj2jPEnQ2wA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "52463b5a-a8e9-4224-84d4-36a96b468d56",
                            TeamId = 2,
                            TwoFactorEnabled = false,
                            UserName = "breakout@example.com"
                        },
                        new
                        {
                            Id = "38c9194b-486c-4922-b2cf-0c1f8465ca99",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f4302428-ec4d-4538-8441-50c71c0f42ce",
                            Email = "dominus@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "DOMINUS@EXAMPLE.COM",
                            NormalizedUserName = "DOMINUS@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEI2mfP9YWjqao4hnbXGgHFQxLnBnBL9hVDnQHdNH6rz9rAU4Z/WzyGsmEKouA73DRg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7fef654f-cca6-45d5-a581-a682583a6190",
                            TeamId = 2,
                            TwoFactorEnabled = false,
                            UserName = "dominus@example.com"
                        },
                        new
                        {
                            Id = "b9a8c61f-35e0-4299-b56d-6ef0ca4f67cf",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d0dd7ab8-d082-49f4-aa07-e3173a33cf3a",
                            Email = "fennec@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "FENNEC@EXAMPLE.COM",
                            NormalizedUserName = "FENNEC@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAED7qeQLHNJMzQDpFUop+I1iHUiNKa6axCwgeboX9tLaPWrOH5NX/2fQ6Vek4taTbDw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2478cda0-8882-4e15-ae3e-5151fb25986c",
                            TeamId = 2,
                            TwoFactorEnabled = false,
                            UserName = "fennec@example.com"
                        },
                        new
                        {
                            Id = "cd407bc3-a6bb-4051-b3a9-a8f0bb66ca41",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b7ca4a84-b3d1-4d43-8635-6cf5222e4d50",
                            Email = "volvo@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "VOLVO@EXAMPLE.COM",
                            NormalizedUserName = "VOLVO@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEJh+TYECqOJ24u0Vz09Q3Dvn4hjn14lMjiuxb3HSjytxkFIAes3Jtk0LFw6tBw9UWA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b43f3959-a395-400c-9220-e8ac035602b1",
                            TeamId = 3,
                            TwoFactorEnabled = false,
                            UserName = "volvo@example.com"
                        },
                        new
                        {
                            Id = "6df351d3-0d05-4fd2-9d85-2bfd62e4b533",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ec0965e9-a2f5-4045-b4f1-2f4af17a9b2a",
                            Email = "volkswagen@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "VOLKSWAGEN@EXAMPLE.COM",
                            NormalizedUserName = "VOLKSWAGEN@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEM16QbDdfD1HmYnA8I3HF5WZ6TAS7iYX0wcaQd4vTbyEI5w1KZYFNi54NFfFbgcGsA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ea96d095-6c32-4844-b624-27478c148c31",
                            TeamId = 3,
                            TwoFactorEnabled = false,
                            UserName = "volkswagen@example.com"
                        },
                        new
                        {
                            Id = "627d77ec-4551-48d0-84b0-fb814108f783",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c9607b7b-49b8-4bd2-b3ca-59d856f632d9",
                            Email = "toyota@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "TOYOTA@EXAMPLE.COM",
                            NormalizedUserName = "TOYOTA@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEGFem2zIGIJi3ph6k4EYu+Buhcay9KIQ9Sj2SaX1m81GAh5MMCVi8q8iDFXkZ4lwYA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "34d1a40a-a8d8-41df-9d54-0fb6e1ddd6fa",
                            TeamId = 3,
                            TwoFactorEnabled = false,
                            UserName = "toyota@example.com"
                        },
                        new
                        {
                            Id = "06f0e8e3-b9bb-49de-b1a3-b177496d8bed",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "044fa24a-a7c3-41cc-8f95-6aa267516a2e",
                            Email = "ferrari@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "FERRARI@EXAMPLE.COM",
                            NormalizedUserName = "FERRARI@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEKh68h1Kqf/UxfxfEh0dRQw7Au5dV7QhZKsxHfJzCa0TZxTCFb5Ul1HP5OVqiJR29Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "dbb9938e-be1c-4051-8fb8-04ca6b831f68",
                            TeamId = 3,
                            TwoFactorEnabled = false,
                            UserName = "ferrari@example.com"
                        },
                        new
                        {
                            Id = "536382a4-9dee-46a6-8fc9-851d10b68983",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d4614f9a-f107-4eb3-b067-ce0d40a3104b",
                            Email = "mercedes@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "MERCEDES@EXAMPLE.COM",
                            NormalizedUserName = "MERCEDES@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEK68CooC9TpI3/UYXLFVubgIGKoue60GppzlY5ImkoU6ILGK/IqgowE8dGBN4yhFPg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6f468373-2e33-4ca9-ab48-e06e6bd2bd29",
                            TeamId = 3,
                            TwoFactorEnabled = false,
                            UserName = "mercedes@example.com"
                        },
                        new
                        {
                            Id = "fce44453-b29a-498c-a97c-6f4e56396561",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f78b0f78-f87b-4091-8bc8-e1cf7abde88f",
                            Email = "bruce@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "BRUCE@EXAMPLE.COM",
                            NormalizedUserName = "BRUCE@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEKzTrFxkilmZkG4JwgBxAE4wRq8dFuykV2WQoqYHGVkYNmYVfLyI8DEqeYJzTkwVvQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "de9238cb-c81b-49b6-9657-94cebe693118",
                            TeamId = 4,
                            TwoFactorEnabled = false,
                            UserName = "bruce@example.com"
                        },
                        new
                        {
                            Id = "79a95c24-b658-423b-91c9-f2a1dd715778",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "37654954-99a4-4a41-839c-04def3f7cdf2",
                            Email = "mcqueen@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "MCQUEEN@EXAMPLE.COM",
                            NormalizedUserName = "MCQUEEN@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEDJjjzJ8dqJFpmmMV/kWrEu7Bb+6okj6onqJGZM3awcZ9wyhuwnZdEAP2tDALkPNFA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c83babb5-f32e-488c-afa7-68fc5ec87e30",
                            TeamId = 5,
                            TwoFactorEnabled = false,
                            UserName = "mcqueen@example.com"
                        },
                        new
                        {
                            Id = "a761ea6b-6a47-445f-b0d4-1a37f8b41569",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "475a03ee-9fba-4db0-9d14-48b43663ce89",
                            Email = "mack@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "MACK@EXAMPLE.COM",
                            NormalizedUserName = "MACK@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEECrtBic9yNJvgJPoHHaeE+e5WhpgyxVYhIg4VnoRGYhKXoWiskDEH+ALxwdzOTpQA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b4930413-d238-48d8-af59-f2b4d80f38b9",
                            TeamId = 5,
                            TwoFactorEnabled = false,
                            UserName = "mack@example.com"
                        },
                        new
                        {
                            Id = "266292bf-49f8-44d9-9f72-fc542ad4cfab",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6b7f715e-8068-49a7-8c29-21ef708bcee7",
                            Email = "rusty@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "RUSTY@EXAMPLE.COM",
                            NormalizedUserName = "RUSTY@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEJBy3M1fJ5udHsnZn/PaBjxzrK+BFvEXc2hhy0FMM1tDE9+m+eBm++DLsISl76ZYkg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9e51d895-9448-4b70-b7ed-213f19e8c82f",
                            TeamId = 5,
                            TwoFactorEnabled = false,
                            UserName = "rusty@example.com"
                        },
                        new
                        {
                            Id = "081e576d-9041-4c45-a055-c43e99d8c7e6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "02cd7017-05c2-4301-b200-49b402b46ee8",
                            Email = "dusty@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "DUSTY@EXAMPLE.COM",
                            NormalizedUserName = "DUSTY@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAENQaGFShqzorD3K4pws9IxBWAj+MiEBNrAzTJp5rF9LzAh/eiE9LoME9OVUQ+BaWhw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "600b376c-2c6e-40bf-8289-9619325d8089",
                            TeamId = 5,
                            TwoFactorEnabled = false,
                            UserName = "dusty@example.com"
                        },
                        new
                        {
                            Id = "f6b6d6d3-10b2-4bcf-b9fb-17c767fc1ab0",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "da2c0005-7957-48b7-b11d-99174d3c7f62",
                            Email = "banaan@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "BANAAN@EXAMPLE.COM",
                            NormalizedUserName = "BANAAN@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEMqu5357xwUY8DuCxO60ODkaLgJq7ixQoaqM6i69Bap3fR9fR/av2ITirfajYhVT+Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "075db8bf-49f0-4caf-94f3-cf82d1c041ad",
                            TeamId = 6,
                            TwoFactorEnabled = false,
                            UserName = "banaan@example.com"
                        },
                        new
                        {
                            Id = "34e13bfb-fc7a-4e97-ad72-29a787cd1fce",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4ec5baea-7e13-4327-a4db-f54a29da243c",
                            Email = "citroen@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "CITROEN@EXAMPLE.COM",
                            NormalizedUserName = "CITROEN@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAELVIcmscE9GKGgj7loz3ty9venCNDrYCiqZ5tqXCnbauRV1FBt61e7RPMUWoD6Lsyw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e2169845-34c8-4028-8d95-d0c43c38dd85",
                            TeamId = 6,
                            TwoFactorEnabled = false,
                            UserName = "citroen@example.com"
                        },
                        new
                        {
                            Id = "9d6b6bd8-00af-4b4e-a004-38ad4485e78b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "17b79e8f-a5cb-4c3d-a3e3-e3cf83445afb",
                            Email = "sinaasappel@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "SINAASAPPEL@EXAMPLE.COM",
                            NormalizedUserName = "SINAASAPPEL@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEPOUn2rLKxrFUu8zkjUzVA9yGx9dsY2nLDl6p4f4+yynjd7rweOdM/TMAYGGDJRFfg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d957cd4e-a9c5-4bc3-a320-e56546118e8d",
                            TeamId = 6,
                            TwoFactorEnabled = false,
                            UserName = "sinaasappel@example.com"
                        },
                        new
                        {
                            Id = "af558003-466e-4ff4-91fb-e281cad61f68",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "909aa804-c271-4f25-8ce2-4101ad9d9af1",
                            Email = "watermeloen@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "WATERMELOEN@EXAMPLE.COM",
                            NormalizedUserName = "WATERMELOEN@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAELascqoLO3dj2XnRwLi3/JfNsQIQNWEQVq4pmcFh0+93ls3aLft+zGSgOg+hu1Zs2g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e20d4136-638d-4f68-8ecb-175be7f66ac6",
                            TeamId = 6,
                            TwoFactorEnabled = false,
                            UserName = "watermeloen@example.com"
                        },
                        new
                        {
                            Id = "6ba56498-562b-47e3-99f9-a0479b041c09",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "dd54e1b0-090b-412f-a972-5ac2ffd45a36",
                            Email = "appel@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "APPEL@EXAMPLE.COM",
                            NormalizedUserName = "APPEL@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEIKzO8m9Iob/Ivk4ZEGwKtNqYlbw4smlOeAKPQ9HcPydVXoLtAR7iT9dv+s3QTQZtw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6a90eb73-b7cf-447b-beb5-e8b09e646aa7",
                            TeamId = 6,
                            TwoFactorEnabled = false,
                            UserName = "appel@example.com"
                        },
                        new
                        {
                            Id = "9c35f879-044a-47c4-b609-c484104c61fc",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8e6e6ff0-d2ad-4f81-a515-4906ae5d7520",
                            Email = "peer@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "PEER@EXAMPLE.COM",
                            NormalizedUserName = "PEER@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEMiuAPUFM9TPP2HOOIgjPfIZVxrOAK4vfxxFdc6yuxPL+vXAQnaB5La73mvh1zFMEA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b1fc02fc-1fa2-4ee9-a056-9a6c9c524526",
                            TeamId = 6,
                            TwoFactorEnabled = false,
                            UserName = "peer@example.com"
                        },
                        new
                        {
                            Id = "fbc02091-1d0a-4f1a-af66-7c282f17c739",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "05abec35-6519-4e7c-affc-863f4c218121",
                            Email = "kiwi@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "KIWI@EXAMPLE.COM",
                            NormalizedUserName = "KIWI@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEH8ugt6qwUz+hIuzrXPGLe9D0+llTwIfeE8cMZ6u/MtY7bwIT1GHI6hCgYWp2mhvHQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b3b39b7d-7f99-4b5d-9cf9-8777689ff34f",
                            TeamId = 6,
                            TwoFactorEnabled = false,
                            UserName = "kiwi@example.com"
                        },
                        new
                        {
                            Id = "2226c3ac-fbba-4bce-b0ef-b61c013a78fe",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6bf5213a-9e1d-4fbf-b276-36d60f5f2b01",
                            Email = "avocado@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "AVOCADO@EXAMPLE.COM",
                            NormalizedUserName = "AVOCADO@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEPNvKZD6rUMa8VOP+f4i3ASZOWGjPAemp8KyTua1WrzTLmlRwNdHdFNGtnghPRaKgg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e99de644-3a65-4e5d-87dc-d440c522fcc8",
                            TeamId = 6,
                            TwoFactorEnabled = false,
                            UserName = "avocado@example.com"
                        },
                        new
                        {
                            Id = "412bed91-ad5f-47d4-ab99-fd5ad2d348c2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1d86b93b-90be-47c7-9242-32a5e1bcc361",
                            Email = "waterzwijn@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "WATERZWIJN@EXAMPLE.COM",
                            NormalizedUserName = "WATERZWIJN@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEO3O9g5s4rG5HhSAYzGV7xmAoES9MNfWvTMvJIVK+51Nb2Xpwhd2ZxgVgyE6tfjXqg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c753f4dc-e156-45ce-b2b7-04e1f5d38c83",
                            TeamId = 7,
                            TwoFactorEnabled = false,
                            UserName = "waterzwijn@example.com"
                        },
                        new
                        {
                            Id = "583d4fbd-34f3-4fed-96b2-d427916eb442",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9ddac693-0f1b-4d35-a640-401064a9e05d",
                            Email = "huiskat@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "HUISKAT@EXAMPLE.COM",
                            NormalizedUserName = "HUISKAT@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEDpsBICg+YeCRvXlbx1DZOQl9cpAtI9yPt5w0AEtc9Y7MQPZJhnooU929jxi7Ard6w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6014f633-6ee4-4701-bc5f-bf8cdbbdf4ce",
                            TeamId = 7,
                            TwoFactorEnabled = false,
                            UserName = "huiskat@example.com"
                        },
                        new
                        {
                            Id = "8a18e012-6aa4-4015-9e0b-fe7abc9cadf1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "184e1e15-13b9-4554-97d6-274729131857",
                            Email = "hyena@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "HYENA@EXAMPLE.COM",
                            NormalizedUserName = "HYENA@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEHMgzk7bl++HwOTbknHMrjAq9O8kJmPgkHdqrfHN3b6y34lGeS4PKwziKYeJFA/5XA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "82a61060-6540-4c47-85c7-ff91ec8c2586",
                            TeamId = 7,
                            TwoFactorEnabled = false,
                            UserName = "hyena@example.com"
                        });
                });

            modelBuilder.Entity("CTFTournamentPlanner.Models.Round", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BracketId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BracketId");

                    b.ToTable("Rounds");
                });

            modelBuilder.Entity("CTFTournamentPlanner.Models.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Teams");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Gewoon buitenaards goed!",
                            Name = "Planeten"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Wij zijn de betere auto's. Wij rijden niet alleen, wij vliegen naar de overwinning!",
                            Name = "Flip Reset"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Waarom zou je naar de overwinning rennen als je naar de overwinning kunt rijden?",
                            Name = "Auto"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Onze prestaties zijn te allen tijde vlekkeloos!",
                            Name = "Vlekkeloos"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Ka-chow!",
                            Name = "Rusteze"
                        },
                        new
                        {
                            Id = 6,
                            Description = "Zoet of zuur, wij winnen elk uur!",
                            Name = "Fruit"
                        },
                        new
                        {
                            Id = 7,
                            Description = "Wij rennen naar de overwinning!",
                            Name = "Vierpoten"
                        });
                });

            modelBuilder.Entity("MatchupTeam", b =>
                {
                    b.Property<int>("MatchupsId")
                        .HasColumnType("int");

                    b.Property<int>("TeamsId")
                        .HasColumnType("int");

                    b.HasKey("MatchupsId", "TeamsId");

                    b.HasIndex("TeamsId");

                    b.ToTable("MatchupTeam");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "e0f4adb4-8c3d-45ff-a814-62c3c873fba5",
                            Name = "Administrators",
                            NormalizedName = "ADMINISTRATORS"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "372725a0-0897-4dd1-a77a-0f9cce9ca7ad",
                            RoleId = "e0f4adb4-8c3d-45ff-a814-62c3c873fba5"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("BracketTeam", b =>
                {
                    b.HasOne("CTFTournamentPlanner.Models.Bracket", null)
                        .WithMany()
                        .HasForeignKey("BracketsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CTFTournamentPlanner.Models.Team", null)
                        .WithMany()
                        .HasForeignKey("TeamsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CTFTournamentPlanner.Models.Matchup", b =>
                {
                    b.HasOne("CTFTournamentPlanner.Models.Round", "Round")
                        .WithMany("Matchups")
                        .HasForeignKey("RoundId");

                    b.Navigation("Round");
                });

            modelBuilder.Entity("CTFTournamentPlanner.Models.Player", b =>
                {
                    b.HasOne("CTFTournamentPlanner.Models.Team", "Team")
                        .WithMany("Players")
                        .HasForeignKey("TeamId");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("CTFTournamentPlanner.Models.Round", b =>
                {
                    b.HasOne("CTFTournamentPlanner.Models.Bracket", "Bracket")
                        .WithMany("Rounds")
                        .HasForeignKey("BracketId");

                    b.Navigation("Bracket");
                });

            modelBuilder.Entity("MatchupTeam", b =>
                {
                    b.HasOne("CTFTournamentPlanner.Models.Matchup", null)
                        .WithMany()
                        .HasForeignKey("MatchupsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CTFTournamentPlanner.Models.Team", null)
                        .WithMany()
                        .HasForeignKey("TeamsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("CTFTournamentPlanner.Models.Player", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("CTFTournamentPlanner.Models.Player", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CTFTournamentPlanner.Models.Player", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("CTFTournamentPlanner.Models.Player", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CTFTournamentPlanner.Models.Bracket", b =>
                {
                    b.Navigation("Rounds");
                });

            modelBuilder.Entity("CTFTournamentPlanner.Models.Round", b =>
                {
                    b.Navigation("Matchups");
                });

            modelBuilder.Entity("CTFTournamentPlanner.Models.Team", b =>
                {
                    b.Navigation("Players");
                });
#pragma warning restore 612, 618
        }
    }
}
