// <auto-generated />
using System;
using CTFTournamentPlanner.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CTFTournamentPlanner.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20231016175707_UserSeeding6")]
    partial class UserSeeding6
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BracketTeam", b =>
                {
                    b.Property<int>("BracketsId")
                        .HasColumnType("int");

                    b.Property<int>("TeamsId")
                        .HasColumnType("int");

                    b.HasKey("BracketsId", "TeamsId");

                    b.HasIndex("TeamsId");

                    b.ToTable("BracketTeam");
                });

            modelBuilder.Entity("CTFTournamentPlanner.Models.Bracket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsGenerated")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Brackets");
                });

            modelBuilder.Entity("CTFTournamentPlanner.Models.Matchup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("RoundId")
                        .HasColumnType("int");

                    b.Property<int?>("ScoreA")
                        .HasMaxLength(100)
                        .HasColumnType("int");

                    b.Property<int?>("ScoreB")
                        .HasMaxLength(100)
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoundId");

                    b.ToTable("Matchups");
                });

            modelBuilder.Entity("CTFTournamentPlanner.Models.Player", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTeamLeader")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TeamId")
                        .HasColumnType("int");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("TeamId");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "372725a0-0897-4dd1-a77a-0f9cce9ca7ad",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "51f84465-fd54-4ddb-a0df-bcd063a321c8",
                            Email = "admin@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@EXAMPLE.COM",
                            NormalizedUserName = "ADMIN@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEOK1sarQcE/i9sL2ciE0SKfsuPWA2RLHzQ/Uj4mcjXnSsTxXDVwFU2SAFTBwkcc3sg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "78ef60cf-19f0-4787-8530-5fb4d02c272c",
                            TwoFactorEnabled = false,
                            UserName = "admin@example.com"
                        },
                        new
                        {
                            Id = "4c2f35de-e1d6-4f68-9e72-e26e6470e5d9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ba9fbb86-ef76-4e68-98fc-41e7a15332a2",
                            Email = "aarde@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "AARDE@EXAMPLE.COM",
                            NormalizedUserName = "AARDE@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEDwYR9trhBzKm27gbbh8pNtw8Jllh+C5FKaGkPxnRpjiTDDdDTWW8IZqdEwEuiFNzQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b3adc2c3-f7ce-4334-9b64-b83b3512cc9d",
                            TeamId = 1,
                            TwoFactorEnabled = false,
                            UserName = "aarde@example.com"
                        },
                        new
                        {
                            Id = "17cba1d2-6ea1-44c0-a7db-0e40a864fbf8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3fe9cec8-87ff-4728-96e4-ccd93a59aae1",
                            Email = "mars@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "MARS@EXAMPLE.COM",
                            NormalizedUserName = "MARS@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEBwDNQqnnei2JYa6fUhH0e3VOozf0f4LgqLKM29PLGa8DBiVF8ZiEZxTiB6b4amjEw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "93da63f3-b0ca-4fb5-a422-e41e85dde3e1",
                            TeamId = 1,
                            TwoFactorEnabled = false,
                            UserName = "mars@example.com"
                        },
                        new
                        {
                            Id = "ce34cf19-efa6-4ae7-b649-b55c7c236cb6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4401bb14-ded5-4fe7-b74f-dde5e64c71ae",
                            Email = "venus@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "VENUS@EXAMPLE.COM",
                            NormalizedUserName = "VENUS@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEHRx7rCoTmcENSrsIxzLF0sGpdFi9qLzlEs9VJT2OyvC9Ndv2uUHzxgg4ugp4v/Ryg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "06f0b813-3118-4f72-b5aa-d572a69a214c",
                            TeamId = 1,
                            TwoFactorEnabled = false,
                            UserName = "venus@example.com"
                        },
                        new
                        {
                            Id = "1344c7e4-a10c-49f1-96a8-6cc705163bfb",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fbd696ab-23f8-4e88-a28b-cf60026b1815",
                            Email = "mercurius@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "MERCURIUS@EXAMPLE.COM",
                            NormalizedUserName = "MERCURIUS@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEN6OZjfLB7NHLS+P+gq8oMGXWkGwlLZnmVBjdWMdObecWSr80AjgDv9hoBdPKlPiMw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b36a52f0-11ad-4cda-ade2-9d9df380cc0e",
                            TeamId = 1,
                            TwoFactorEnabled = false,
                            UserName = "mercurius@example.com"
                        },
                        new
                        {
                            Id = "b19c9700-487a-440a-bdda-053fcc879e61",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4543bf12-9130-4bf7-b2b1-56ddf9b17b8f",
                            Email = "uranus@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "URANUS@EXAMPLE.COM",
                            NormalizedUserName = "URANUS@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEDG9DAZiyi6uGZGIrEc6HlP/BvmcFC799hQjK7YTe2AUF4i1ijVHxmoeGwuOq5RNfA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "171197b2-6ab2-443d-859e-a9ca5d326d65",
                            TeamId = 1,
                            TwoFactorEnabled = false,
                            UserName = "uranus@example.com"
                        },
                        new
                        {
                            Id = "2e3105e0-d9d5-4619-bc0e-aa9933bb4f79",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c6ee66fa-b12a-406d-8657-aefb3cd7af59",
                            Email = "neptunes@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "NEPTUNES@EXAMPLE.COM",
                            NormalizedUserName = "NEPTUNES@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEJ2OjrgPyYXw3Y0u0rjU7LiMQ0wF7GBozPYhHh0uEyprUMPWXdNra8X89XcKE3MgYw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f1f081c8-2287-477c-92d4-b8ac5b420a6b",
                            TeamId = 1,
                            TwoFactorEnabled = false,
                            UserName = "neptunes@example.com"
                        },
                        new
                        {
                            Id = "cf8d2abc-20d7-4b88-8e50-c8e574942a2d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8c1e8c36-95c4-4e45-a1b6-8a35ff9845fe",
                            Email = "saturnus@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "SATURNUS@EXAMPLE.COM",
                            NormalizedUserName = "SATURNUS@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEM6Vj5H+26BcFq8vzhuOTOFF0PUSUnDms/cccDCW6rOwfcJ898n7HZqWicp4bGEeFw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e5636f33-3ce8-4e82-be70-6e61c444f87d",
                            TeamId = 1,
                            TwoFactorEnabled = false,
                            UserName = "saturnus@example.com"
                        },
                        new
                        {
                            Id = "e85d8cab-9060-4f10-99b2-c5fa31b224be",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "26e9f28d-767a-4f7a-8181-9d2b43879c63",
                            Email = "jupiter@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "JUPITER@EXAMPLE.COM",
                            NormalizedUserName = "JUPITER@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEKnYNCqcyez9q9wPiC1gtefF84lZ0RaLZQwqZORarxNuXH7jujrIRcjcNgQ575xBcg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "bb4c52bc-3347-4bb7-9cf9-aa24e1e33ec2",
                            TeamId = 1,
                            TwoFactorEnabled = false,
                            UserName = "jupiter@example.com"
                        },
                        new
                        {
                            Id = "20284b24-9a53-4d1f-bd4d-f330e1b334d5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "98312278-fd3d-4c12-bc30-590ab8e8d89b",
                            Email = "octane@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "OCTANE@EXAMPLE.COM",
                            NormalizedUserName = "OCTANE@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEGsIHX4QBSBnlOuqQQAHvkXef29NtwUMf6BEKppf7xwjMy/U9iR/y2NkOG9IaK5Cjg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ac5f908e-ca0c-451b-8e22-3fee06bf7756",
                            TeamId = 2,
                            TwoFactorEnabled = false,
                            UserName = "octane@example.com"
                        },
                        new
                        {
                            Id = "29d00832-82b0-4080-9df9-6c1a2013fd54",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "65becf48-9ceb-452e-bd63-34731296f308",
                            Email = "breakout@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "BREAKOUT@EXAMPLE.COM",
                            NormalizedUserName = "BREAKOUT@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAED6r72308lIWg6MFHBn8BbiAnk1OAy0D6P2nvMLGoKDRrOfQWtPbVMSfGJG2ZKKXUw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "cb3fa142-76b9-471f-8c7b-a1edd07b47e7",
                            TeamId = 2,
                            TwoFactorEnabled = false,
                            UserName = "breakout@example.com"
                        },
                        new
                        {
                            Id = "3f7b3fe4-deb3-40b5-9178-d1c36e6daae2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "19b0fea7-b77b-46b2-ad2f-053d1d669392",
                            Email = "dominus@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "DOMINUS@EXAMPLE.COM",
                            NormalizedUserName = "DOMINUS@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEPDh7DUg3Dw/SQo4fltkeSqTRQdcasdeASfz878YoRuHG90d3zWsKnV+P5W2/3Uwlw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3ac99ea1-707a-4a01-8336-3e1f7c3447f7",
                            TeamId = 2,
                            TwoFactorEnabled = false,
                            UserName = "dominus@example.com"
                        },
                        new
                        {
                            Id = "9e67efce-1dd6-46c1-aa4d-b12d19f328fa",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "10d4289d-d1bb-408e-bbfb-2a2533a67f01",
                            Email = "fennec@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "FENNEC@EXAMPLE.COM",
                            NormalizedUserName = "FENNEC@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEPVJclRnjgmRkoOvoYlxsm4p8qJYUhjqABQYFjwkOFpJ0vksC+Gni7U9FSHYpJqmFQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6c930792-d77d-4a5d-85d7-daf91e94df4b",
                            TeamId = 2,
                            TwoFactorEnabled = false,
                            UserName = "fennec@example.com"
                        },
                        new
                        {
                            Id = "5895071a-c273-47b3-9a49-3ce6bbd1a9c3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "21269214-ac44-4543-a64e-6164ef55bce3",
                            Email = "volvo@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "VOLVO@EXAMPLE.COM",
                            NormalizedUserName = "VOLVO@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEJFr/i2LXGrhvOYyR8QfNj1JvNcM6hNtF0gLQJMsqZddh85kZHimucsiYG1iMC37BQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e0c0b20c-9fd3-4e6c-b261-c51c3f4f7578",
                            TeamId = 3,
                            TwoFactorEnabled = false,
                            UserName = "volvo@example.com"
                        },
                        new
                        {
                            Id = "afce0866-a0a2-40a5-af84-31eb3566dad4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ae97b966-ed71-4ed8-ac37-c55bb4fcc7be",
                            Email = "volkswagen@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "VOLKSWAGEN@EXAMPLE.COM",
                            NormalizedUserName = "VOLKSWAGEN@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEH8AxhcutqxJvlpKc6mcrjLssEpMCNnpo6rfKQc03FuCJcqGDA/QgfWT2vHhF7jfCA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2f28807a-600c-41be-b2d9-3dffc8b1ab41",
                            TeamId = 3,
                            TwoFactorEnabled = false,
                            UserName = "volkswagen@example.com"
                        },
                        new
                        {
                            Id = "ca760475-8f16-4c27-b8b7-2a02e316c255",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "717109d5-9b93-413e-8d92-0d42cc6da3b8",
                            Email = "toyota@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "TOYOTA@EXAMPLE.COM",
                            NormalizedUserName = "TOYOTA@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEMtxlLI7IP/pc8olGIZ3NGCVk+IwGzKsJd5OKUPuvscawXR5NOv50yFuHfnjzwQPtA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ebabfd3d-5a0d-49f0-8caf-f847f7f990ed",
                            TeamId = 3,
                            TwoFactorEnabled = false,
                            UserName = "toyota@example.com"
                        },
                        new
                        {
                            Id = "6082d369-7981-48e4-b2f2-20f5e5cddcda",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "181260e3-d588-4a42-9808-dcfd70e0b697",
                            Email = "ferrari@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "FERRARI@EXAMPLE.COM",
                            NormalizedUserName = "FERRARI@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEOg6b38NRFpuTIpeTsSZxkVfbDdk+QLfENbTj3y3QVVjDm/OKPIfDwoyZyg1/hmzHg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "88e0eb9e-beb5-46f5-b7bd-3dced1329d39",
                            TeamId = 3,
                            TwoFactorEnabled = false,
                            UserName = "ferrari@example.com"
                        },
                        new
                        {
                            Id = "2bc4f6dc-8926-4728-b4df-30dce6ade8b4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "67143c3e-0c3a-48eb-bd9f-21ecc43f541c",
                            Email = "mercedes@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "MERCEDES@EXAMPLE.COM",
                            NormalizedUserName = "MERCEDES@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEDgDjHGhRtm2zA88jgX8yBhcrSz8OGwNm0GTaDKUQM6cCOZVfMXR3nmlm5XHScUwHQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "858f751e-1a1d-45e2-9e61-96d1174bf41e",
                            TeamId = 3,
                            TwoFactorEnabled = false,
                            UserName = "mercedes@example.com"
                        },
                        new
                        {
                            Id = "0044ab8a-86f8-4ab8-8b30-216aba5af903",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "48c0d668-e174-4d51-bf7f-9dfa37593a8c",
                            Email = "bruce@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "BRUCE@EXAMPLE.COM",
                            NormalizedUserName = "BRUCE@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAECwoQHR88QmonqHfvSIRyMJaF+Cqtscsn4PNiyml2DoaLFmCjnuqDXaGsJ9qxQa/YA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4cd60cc7-98ef-444c-aa15-7939e79d7e09",
                            TeamId = 4,
                            TwoFactorEnabled = false,
                            UserName = "bruce@example.com"
                        },
                        new
                        {
                            Id = "c0c38ba3-67b1-4450-9d7d-865932754e78",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "30766bd1-25a4-4c8f-adf7-2f7673a55092",
                            Email = "mcqueen@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "MCQUEEN@EXAMPLE.COM",
                            NormalizedUserName = "MCQUEEN@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAECi1LckD1Dm/XoMGVRSnxXSfPF5YQ+U+0Mh8jAbEQg2AGjVjjun6KBxiapRsT5ciag==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1ffaac89-d6e5-4991-82b6-05e0545fed3f",
                            TeamId = 5,
                            TwoFactorEnabled = false,
                            UserName = "mcqueen@example.com"
                        },
                        new
                        {
                            Id = "a217f5a9-eb50-4b26-9732-f398cbd670ea",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "47015180-e686-4741-80cd-76482f646c30",
                            Email = "mack@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "MACK@EXAMPLE.COM",
                            NormalizedUserName = "MACK@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEL/j+xEvRirWnKCVajY+kKjCmhPY3XoweMpqcaooqFQjBSbUjmzC08i7tHq2fHTapg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9abf38eb-e921-43c4-bb31-95b39372028a",
                            TeamId = 5,
                            TwoFactorEnabled = false,
                            UserName = "mack@example.com"
                        },
                        new
                        {
                            Id = "25753620-cd54-4cd7-a0ab-9c1487eb6699",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "50e58ff0-8e77-438f-8acc-7ee90430fbbc",
                            Email = "rusty@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "RUSTY@EXAMPLE.COM",
                            NormalizedUserName = "RUSTY@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEFCN0e9fdrxnG6/L1hEDA+mADTEbAM7PoiB1+5DOVzbd71i/Nk47HFQVDBUxwAbaow==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "704ae9d7-b51e-4b86-b6c4-8fd5b4db43cb",
                            TeamId = 5,
                            TwoFactorEnabled = false,
                            UserName = "rusty@example.com"
                        },
                        new
                        {
                            Id = "e6aa4d0c-3f98-4cc8-b5e3-a2937fe426eb",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2ab9edbf-81be-455e-8cae-419525d0b3df",
                            Email = "dusty@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "DUSTY@EXAMPLE.COM",
                            NormalizedUserName = "DUSTY@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEB2rXWzKrTNN9R/MFDYRH+WU0H96NMzrXotz0nx89CukpGNdYd3Zknio077SMEXjsg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9433bb95-6d38-478f-97c4-c3b91f26a0fe",
                            TeamId = 5,
                            TwoFactorEnabled = false,
                            UserName = "dusty@example.com"
                        },
                        new
                        {
                            Id = "e27b98c9-c856-4d1c-82b2-f9bfa905f4f7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e78fa82c-40d1-4850-a718-7b3e7bee30a6",
                            Email = "banaan@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "BANAAN@EXAMPLE.COM",
                            NormalizedUserName = "BANAAN@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEOw3/whclPTsmd8Tb1a5IFjpBVZnLs9oTeI7xj5zFWx5gBxVWL9U6xXioRrtKll/cQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "da779b76-3048-45e1-a635-6b003899c332",
                            TeamId = 6,
                            TwoFactorEnabled = false,
                            UserName = "banaan@example.com"
                        },
                        new
                        {
                            Id = "b9095f76-3d64-4676-8c97-7431c5dd6eda",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5627fea8-8efd-4551-a7b8-33c3a9c9c4d5",
                            Email = "citroen@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "CITROEN@EXAMPLE.COM",
                            NormalizedUserName = "CITROEN@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEBlKFstBU8bRO5m8emddRAAKf1Nqr3lp4SQ9H/MgOqiMKn90w464FRRSX8K7IB+LPg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0e6f1f2a-d1ad-4be8-8fbb-1a13d0ef9a3b",
                            TeamId = 6,
                            TwoFactorEnabled = false,
                            UserName = "citroen@example.com"
                        },
                        new
                        {
                            Id = "d88d8bc6-7325-4d1c-b309-f274c9483c0c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1290f631-f810-4738-97df-8b9cf20d6086",
                            Email = "sinaasappel@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "SINAASAPPEL@EXAMPLE.COM",
                            NormalizedUserName = "SINAASAPPEL@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEPo7a0VpZoNmPAZvfJFrAtqxkh60zRKsGT9AfahAFu6pVSr0hY/t4db5Dk3BlIaQPQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "26a0c794-77ac-4f28-9895-3668a9ae4154",
                            TeamId = 6,
                            TwoFactorEnabled = false,
                            UserName = "sinaasappel@example.com"
                        },
                        new
                        {
                            Id = "7e848164-f081-4fa8-9be2-da5e5f34b008",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b151d4f4-4451-409c-96c3-6dcc68754ce1",
                            Email = "watermeloen@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "WATERMELOEN@EXAMPLE.COM",
                            NormalizedUserName = "WATERMELOEN@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEMXtS6Ytg19S8aLbtlzPIHvjGo6QZuaHxyShbO4k+Es2hv7r1dqGeaZuj1FArraA5g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "156960da-89ab-4a9c-a9af-494033feb8e9",
                            TeamId = 6,
                            TwoFactorEnabled = false,
                            UserName = "watermeloen@example.com"
                        },
                        new
                        {
                            Id = "b442d50d-d90c-424d-a8ba-6829517a6c42",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "052d67cd-b8b8-49ea-93ad-3e9cd26ad5e1",
                            Email = "appel@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "APPEL@EXAMPLE.COM",
                            NormalizedUserName = "APPEL@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAED4Wf/IzRJCVJOvkoJWqhPnA87d3savoQc7YLWr7ooJEL6nOBRBqQ0B+mn3GCZ/OTg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "87c395c8-f13b-4dcf-95b4-99cf7f7403d6",
                            TeamId = 6,
                            TwoFactorEnabled = false,
                            UserName = "appel@example.com"
                        },
                        new
                        {
                            Id = "d0761263-757f-4e63-8436-2409bf5205a5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2f7e860e-92d3-48ae-b19b-aeb7c2097c14",
                            Email = "peer@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "PEER@EXAMPLE.COM",
                            NormalizedUserName = "PEER@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEOwbTiGuuh5oeklXAMYM38mlVdrtatSUc116XEcSPQSdgHPPlkZm92wn42q1MmLfcQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "00e2cf4f-2b32-48b4-97b0-c22be709b408",
                            TeamId = 6,
                            TwoFactorEnabled = false,
                            UserName = "peer@example.com"
                        },
                        new
                        {
                            Id = "ed60e34a-81de-4d05-88d2-2719d2bd4501",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f21ace41-4f9c-492c-92d2-85fefe6a1944",
                            Email = "kiwi@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "KIWI@EXAMPLE.COM",
                            NormalizedUserName = "KIWI@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEKz9OdrQ9DuELXG1DZXdgI3J8lbPYtMpfesa+g4XeTIrCoxQMmbtVmDf0Y4VUOaE+A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a076c82c-fc53-436c-aff9-c21a4d543e38",
                            TeamId = 6,
                            TwoFactorEnabled = false,
                            UserName = "kiwi@example.com"
                        },
                        new
                        {
                            Id = "fc15f759-9d99-4d19-ba0f-51e44e88db52",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a59dc090-34e3-46c7-86e2-4d99aff1a84b",
                            Email = "avocado@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "AVOCADO@EXAMPLE.COM",
                            NormalizedUserName = "AVOCADO@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEApenNunEJCiO0WnvQTz4ChTcvofYcaqZicy9P086s5urohCnxAkKUt7UIEc9N8ing==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "179ccf65-a451-467b-bad8-e8f262c46c1c",
                            TeamId = 6,
                            TwoFactorEnabled = false,
                            UserName = "avocado@example.com"
                        },
                        new
                        {
                            Id = "ac5e7e73-d30c-4d0d-a5d2-186dcb5cc7c9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "37b0e6ad-2904-4396-b33f-bc5ce8fd781e",
                            Email = "waterzwijn@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "WATERZWIJN@EXAMPLE.COM",
                            NormalizedUserName = "WATERZWIJN@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEORI6bIST8VbJzaE6iNtZCn+2ZldkbC7JEtqhFLheT9nwtqHcwajoLjWeTqJkMN+4w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3c764eea-1cde-4e71-a7db-534ce26cb2a7",
                            TeamId = 7,
                            TwoFactorEnabled = false,
                            UserName = "waterzwijn@example.com"
                        },
                        new
                        {
                            Id = "caf4ad7c-ddbf-4e76-b06f-5c5878d71f46",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d12e0de7-0274-4f74-86e8-bb5c9eed16da",
                            Email = "huiskat@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "HUISKAT@EXAMPLE.COM",
                            NormalizedUserName = "HUISKAT@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEPk0lAV31eBtTNbMCypOSuXK04u7+BBKgbt+fU7uWMu2AwggQI8dWY+jtNSkO6cjJg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c4d8e69c-96a6-4cd4-89cf-f843cb89b779",
                            TeamId = 7,
                            TwoFactorEnabled = false,
                            UserName = "huiskat@example.com"
                        },
                        new
                        {
                            Id = "cf6674af-2692-4515-aefb-a3fe31a0f803",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6d687025-74f3-4816-aba3-cab7b8c7529e",
                            Email = "hyena@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "HYENA@EXAMPLE.COM",
                            NormalizedUserName = "HYENA@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEPbZ9ExS5eV1EbybB2c9Oi0XZDbOddv1NVBKpNXgAtzSFmZeeAOw/pird4XiH2Bo2A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6f772798-207f-4284-bd7d-80f0f35c1565",
                            TeamId = 7,
                            TwoFactorEnabled = false,
                            UserName = "hyena@example.com"
                        });
                });

            modelBuilder.Entity("CTFTournamentPlanner.Models.Round", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BracketId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BracketId");

                    b.ToTable("Rounds");
                });

            modelBuilder.Entity("CTFTournamentPlanner.Models.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Teams");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Gewoon buitenaards goed!",
                            Name = "Planeten"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Wij zijn de betere auto's. Wij rijden niet alleen, wij vliegen naar de overwinning!",
                            Name = "Flip Reset"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Waarom zou je naar de overwinning rennen als je naar de overwinning kunt rijden?",
                            Name = "Auto"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Onze prestaties zijn te allen tijde vlekkeloos!",
                            Name = "Vlekkeloos"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Ka-chow!",
                            Name = "Rusteze"
                        },
                        new
                        {
                            Id = 6,
                            Description = "Zoet of zuur, wij winnen elk uur!",
                            Name = "Fruit"
                        },
                        new
                        {
                            Id = 7,
                            Description = "Wij rennen naar de overwinning!",
                            Name = "Vierpoten"
                        });
                });

            modelBuilder.Entity("MatchupTeam", b =>
                {
                    b.Property<int>("MatchupsId")
                        .HasColumnType("int");

                    b.Property<int>("TeamsId")
                        .HasColumnType("int");

                    b.HasKey("MatchupsId", "TeamsId");

                    b.HasIndex("TeamsId");

                    b.ToTable("MatchupTeam");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "e0f4adb4-8c3d-45ff-a814-62c3c873fba5",
                            Name = "Administrators",
                            NormalizedName = "ADMINISTRATORS"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "372725a0-0897-4dd1-a77a-0f9cce9ca7ad",
                            RoleId = "e0f4adb4-8c3d-45ff-a814-62c3c873fba5"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("BracketTeam", b =>
                {
                    b.HasOne("CTFTournamentPlanner.Models.Bracket", null)
                        .WithMany()
                        .HasForeignKey("BracketsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CTFTournamentPlanner.Models.Team", null)
                        .WithMany()
                        .HasForeignKey("TeamsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CTFTournamentPlanner.Models.Matchup", b =>
                {
                    b.HasOne("CTFTournamentPlanner.Models.Round", null)
                        .WithMany("Matchups")
                        .HasForeignKey("RoundId");
                });

            modelBuilder.Entity("CTFTournamentPlanner.Models.Player", b =>
                {
                    b.HasOne("CTFTournamentPlanner.Models.Team", "Team")
                        .WithMany("Players")
                        .HasForeignKey("TeamId");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("CTFTournamentPlanner.Models.Round", b =>
                {
                    b.HasOne("CTFTournamentPlanner.Models.Bracket", null)
                        .WithMany("Rounds")
                        .HasForeignKey("BracketId");
                });

            modelBuilder.Entity("MatchupTeam", b =>
                {
                    b.HasOne("CTFTournamentPlanner.Models.Matchup", null)
                        .WithMany()
                        .HasForeignKey("MatchupsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CTFTournamentPlanner.Models.Team", null)
                        .WithMany()
                        .HasForeignKey("TeamsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("CTFTournamentPlanner.Models.Player", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("CTFTournamentPlanner.Models.Player", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CTFTournamentPlanner.Models.Player", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("CTFTournamentPlanner.Models.Player", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CTFTournamentPlanner.Models.Bracket", b =>
                {
                    b.Navigation("Rounds");
                });

            modelBuilder.Entity("CTFTournamentPlanner.Models.Round", b =>
                {
                    b.Navigation("Matchups");
                });

            modelBuilder.Entity("CTFTournamentPlanner.Models.Team", b =>
                {
                    b.Navigation("Players");
                });
#pragma warning restore 612, 618
        }
    }
}
