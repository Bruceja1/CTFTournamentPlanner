// <auto-generated />
using System;
using CTFTournamentPlanner.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CTFTournamentPlanner.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20231018193211_AddedBracketProperty")]
    partial class AddedBracketProperty
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BracketTeam", b =>
                {
                    b.Property<int>("BracketsId")
                        .HasColumnType("int");

                    b.Property<int>("TeamsId")
                        .HasColumnType("int");

                    b.HasKey("BracketsId", "TeamsId");

                    b.HasIndex("TeamsId");

                    b.ToTable("BracketTeam");
                });

            modelBuilder.Entity("CTFTournamentPlanner.Models.Bracket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsGenerated")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Brackets");
                });

            modelBuilder.Entity("CTFTournamentPlanner.Models.Matchup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("RoundId")
                        .HasColumnType("int");

                    b.Property<int?>("ScoreA")
                        .HasMaxLength(100)
                        .HasColumnType("int");

                    b.Property<int?>("ScoreB")
                        .HasMaxLength(100)
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoundId");

                    b.ToTable("Matchups");
                });

            modelBuilder.Entity("CTFTournamentPlanner.Models.Player", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTeamLeader")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TeamId")
                        .HasColumnType("int");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("TeamId");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "372725a0-0897-4dd1-a77a-0f9cce9ca7ad",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0cd81709-877c-4158-ae03-5b1f9062cd1b",
                            Email = "admin@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@EXAMPLE.COM",
                            NormalizedUserName = "ADMIN@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEC3nbhn9ObHoN6La9pDzgM8HQPQ8AZRVljGKWBpPjjR4dPbPzEhadMOY4U7NVKjm1A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b45cc6d7-7dd5-47bf-ab5b-cd11beaea957",
                            TwoFactorEnabled = false,
                            UserName = "admin@example.com"
                        },
                        new
                        {
                            Id = "01540c75-7e8f-42fe-a45d-f834e522bef5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bd8f7adf-00b3-498b-8d9d-e8322e6daf1e",
                            Email = "aarde@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "AARDE@EXAMPLE.COM",
                            NormalizedUserName = "AARDE@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEN1UOoT61rFzqOQ6/p/9/QzLkwLf0RZNC7H9bsILun9ey5HwZWZYSTgKsCCNrD6TaA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2f8cb2d5-615d-4c00-85e6-1844ceaced58",
                            TeamId = 1,
                            TwoFactorEnabled = false,
                            UserName = "aarde@example.com"
                        },
                        new
                        {
                            Id = "b66826b2-ec13-440e-8135-704a23a03fd9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3936a4f8-d0e3-4c01-911d-324673ba48a5",
                            Email = "mars@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "MARS@EXAMPLE.COM",
                            NormalizedUserName = "MARS@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEH3GoXY6FuOXimcfwXwhIIenouN8sQghyRJ52v+LzXmXK9IFMIUMgVE8IIyCm09Caw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "91668b00-c57b-4177-ae8d-c53ffe66df44",
                            TeamId = 1,
                            TwoFactorEnabled = false,
                            UserName = "mars@example.com"
                        },
                        new
                        {
                            Id = "9ff5e509-31f7-4c39-a5c9-f42b1f10287d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a5f55465-8fab-4113-82ca-3c14e20eb5b3",
                            Email = "venus@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "VENUS@EXAMPLE.COM",
                            NormalizedUserName = "VENUS@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEGV1aGb44RVO+sTMJw0GbA5bTinwODKXwJbUSDa11KxtXk6mHW4qGoB9wchITbMWeQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5a0f72d3-e581-4f68-be74-8883d32c9fc5",
                            TeamId = 1,
                            TwoFactorEnabled = false,
                            UserName = "venus@example.com"
                        },
                        new
                        {
                            Id = "94936367-a01f-4f75-b8ef-b53313ba9519",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cba5908e-ebb8-4b13-899c-207054c5f044",
                            Email = "mercurius@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "MERCURIUS@EXAMPLE.COM",
                            NormalizedUserName = "MERCURIUS@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEEKEet3UcoZzeN2BbeJY3mdDjgB/e5EF+Pb1VNQGaE2284LYsoJlDwtVLUAfiatLww==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3f35723a-f42e-4144-81a3-cc95acc2ba8b",
                            TeamId = 1,
                            TwoFactorEnabled = false,
                            UserName = "mercurius@example.com"
                        },
                        new
                        {
                            Id = "a96c3d9c-1304-43ce-946a-0e4c5a51804b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "964ddf89-cb2d-4f74-8835-fe4467e5b815",
                            Email = "uranus@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "URANUS@EXAMPLE.COM",
                            NormalizedUserName = "URANUS@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEMQ9F8KPLAVnX+JmOLOywhBMlOsWLBX8vYkyC/gQMJ6xvRvwkNDZApGXc3y8eR+JKw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "30c9109d-3762-4237-a210-266d79a90ca4",
                            TeamId = 1,
                            TwoFactorEnabled = false,
                            UserName = "uranus@example.com"
                        },
                        new
                        {
                            Id = "b4bb479c-678a-4fcc-9b15-7973ba035c31",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "27ee18f2-44fc-4e5a-8d30-b8a51b92a23b",
                            Email = "neptunes@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "NEPTUNES@EXAMPLE.COM",
                            NormalizedUserName = "NEPTUNES@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEMFvtHKkBzMO9Jrdf7PbsNSyQigrMO345Ivg6YYhQoR/p4biiSM/nQQjBVSchL3NNA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "098ca4cb-adc3-4b76-9954-8b4b0ec03549",
                            TeamId = 1,
                            TwoFactorEnabled = false,
                            UserName = "neptunes@example.com"
                        },
                        new
                        {
                            Id = "64bfd85e-31eb-4ed7-92ee-d71a83a7e37a",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f2d85dc7-1902-4ed4-829e-2827d538bff9",
                            Email = "saturnus@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "SATURNUS@EXAMPLE.COM",
                            NormalizedUserName = "SATURNUS@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEAIHRYTW8W4ZGhr1nOO7o1zuUndcWV6r6qcrQqKrBj3p6vstDv+ubVRdAoCXbB/oIw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "da095293-67f2-449d-bc7a-5c6e7f4c260e",
                            TeamId = 1,
                            TwoFactorEnabled = false,
                            UserName = "saturnus@example.com"
                        },
                        new
                        {
                            Id = "562c2c81-e901-4b1c-8c28-a11c5b671787",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3022900c-a0d8-4926-88d3-73ce33e8c657",
                            Email = "jupiter@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "JUPITER@EXAMPLE.COM",
                            NormalizedUserName = "JUPITER@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEA9bih8pkTL+jOH4WVy05x9gFYav0MquxgL2f+bfwJIC2HZ7dwtTn9IiJS1t54xZtQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1074c2e6-f3c7-49a1-a6b7-74f70ab16844",
                            TeamId = 1,
                            TwoFactorEnabled = false,
                            UserName = "jupiter@example.com"
                        },
                        new
                        {
                            Id = "721c20ff-5d34-4c4f-a9fc-59658476912f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d0153ee5-e1c9-4b3b-a4fb-da24ec7684d4",
                            Email = "octane@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "OCTANE@EXAMPLE.COM",
                            NormalizedUserName = "OCTANE@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEAbx3tixX5KNlFV9ozmiBK4i7c7LjCEV0melLlJZ6VIMkOY5wviPiZgVvCX5MVWhkw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "cfaf3b8b-0517-4ecd-8b92-c8480d8f34a2",
                            TeamId = 2,
                            TwoFactorEnabled = false,
                            UserName = "octane@example.com"
                        },
                        new
                        {
                            Id = "27d722f3-68f7-42a3-905a-52098e566c51",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8708e997-b52a-42ce-8059-ce22377fbc4d",
                            Email = "breakout@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "BREAKOUT@EXAMPLE.COM",
                            NormalizedUserName = "BREAKOUT@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEPKlN2WxyFS0fCdNMouXNEGUsecIb5f0gjhV1iHTyrpE388HQryXpbUXGLJ2wjV4SA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "36fd0c1e-8215-47b1-98a7-99700471dca1",
                            TeamId = 2,
                            TwoFactorEnabled = false,
                            UserName = "breakout@example.com"
                        },
                        new
                        {
                            Id = "ba643c0e-6ba7-4297-88bd-cc53a5634d1e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "dae1053a-4e5a-4136-859d-afef0c3b6ca9",
                            Email = "dominus@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "DOMINUS@EXAMPLE.COM",
                            NormalizedUserName = "DOMINUS@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEPJidYpXbR+qVzU3DLPpC895II0RgepE27CgnqcjbeO0ZTzK7f8yTeyzk1aHeoraNw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e21994a7-74c4-466a-8236-4d75735bacd5",
                            TeamId = 2,
                            TwoFactorEnabled = false,
                            UserName = "dominus@example.com"
                        },
                        new
                        {
                            Id = "d43f9978-34db-440d-b546-4bf308b8936a",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "90fffb20-4394-4b54-b45e-b9b9d1ce2c83",
                            Email = "fennec@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "FENNEC@EXAMPLE.COM",
                            NormalizedUserName = "FENNEC@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAECn8cvhA1CEBszwqzusYBLqxyDViCWdWhxXOhdvJ1XbWZgm7IM1Aio+zA7B3UZezVA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e11ae1c1-4056-4cc6-9bdb-c7f9b32703f5",
                            TeamId = 2,
                            TwoFactorEnabled = false,
                            UserName = "fennec@example.com"
                        },
                        new
                        {
                            Id = "fb1c6af6-c657-416a-bedd-7c0afa8cdc22",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f8f9ed08-c1ba-48a3-8396-b5d49cf989e1",
                            Email = "volvo@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "VOLVO@EXAMPLE.COM",
                            NormalizedUserName = "VOLVO@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEL+vxOJKfnW4WLmMPdJ4rzILQtec3m0RVZjY7B/g2RU0Ygtge1Xt2aUQMBcYyaTfkg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "45ea7870-f477-495f-8ad1-56c12b99953a",
                            TeamId = 3,
                            TwoFactorEnabled = false,
                            UserName = "volvo@example.com"
                        },
                        new
                        {
                            Id = "58ad7c06-e494-4411-8537-4480fc28f516",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7aaa03b4-2ddf-4230-a423-8c3a91e7e675",
                            Email = "volkswagen@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "VOLKSWAGEN@EXAMPLE.COM",
                            NormalizedUserName = "VOLKSWAGEN@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEIQYeb8511Cioz4kM/RpABpn1cBmy5NgoQAWuRaMRmTDc2cgiVUCXds3pml2vwMBpw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "337ed4e0-726e-4059-994b-ae55faf18ca3",
                            TeamId = 3,
                            TwoFactorEnabled = false,
                            UserName = "volkswagen@example.com"
                        },
                        new
                        {
                            Id = "55c8442a-4198-4e28-b035-d7c39e3ef855",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0fc1bb2b-d6ea-422a-bfa1-3dc7e224420a",
                            Email = "toyota@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "TOYOTA@EXAMPLE.COM",
                            NormalizedUserName = "TOYOTA@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAENRVMHnkjnRShigBIa0IvZOdyzcFDCxjCmihk+IEnEoolPSbDMN7Zd0kgYcDb833sw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7f136529-a29b-43ce-bcdc-bef50d61d8be",
                            TeamId = 3,
                            TwoFactorEnabled = false,
                            UserName = "toyota@example.com"
                        },
                        new
                        {
                            Id = "56b624f7-15de-4965-9ed2-f5ce745c2427",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1a55d634-a1da-4f6e-b83f-6e34538e8603",
                            Email = "ferrari@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "FERRARI@EXAMPLE.COM",
                            NormalizedUserName = "FERRARI@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAED7eIz0eD3eERK+6GFmAiYM4hOZ6uXMh32lAZSVQDgodKYO4+XFLrwz2apfR9Vy0Jw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "91a9ff48-3b84-44b0-af8f-3705254a5cd3",
                            TeamId = 3,
                            TwoFactorEnabled = false,
                            UserName = "ferrari@example.com"
                        },
                        new
                        {
                            Id = "08f76bd8-f14e-4a00-8a47-92d160e856f4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "53598ea9-8e7c-4f7b-afe1-66d042ddbb87",
                            Email = "mercedes@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "MERCEDES@EXAMPLE.COM",
                            NormalizedUserName = "MERCEDES@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAELp5UtO9kUzcdCAaAfAQhIJ7A67Yw6L74Np/x6CmksWRs+49+Pgjorn54pGaMS4LUg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "cf5f3542-09ae-4167-b900-af0cfa4038d6",
                            TeamId = 3,
                            TwoFactorEnabled = false,
                            UserName = "mercedes@example.com"
                        },
                        new
                        {
                            Id = "f743b192-1832-4116-a652-91c1e35f1b1d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3d2e2408-a10c-49e0-bfa7-4c2a47af865d",
                            Email = "bruce@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "BRUCE@EXAMPLE.COM",
                            NormalizedUserName = "BRUCE@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEMOeQZxRvsoDRawbdhoK55yWrfhq1QKac814PXQQP2KakwgBvLcO+SldJzFWyomBIA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "91800a7a-f935-4eb3-a23e-5ed0c1a30798",
                            TeamId = 4,
                            TwoFactorEnabled = false,
                            UserName = "bruce@example.com"
                        },
                        new
                        {
                            Id = "75051934-a5f1-426e-8a73-04f0b6772583",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a7356cdf-a660-4c3b-8bc1-11ee7586cc89",
                            Email = "mcqueen@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "MCQUEEN@EXAMPLE.COM",
                            NormalizedUserName = "MCQUEEN@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAECgDivAj73ADyWMmlG2FO0hhsexy8xcnfx33f368yBGeNXysqstc1cUuN9RHZhR5zA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8bac177b-1871-44bc-8d8c-b15492d32dcd",
                            TeamId = 5,
                            TwoFactorEnabled = false,
                            UserName = "mcqueen@example.com"
                        },
                        new
                        {
                            Id = "f03d148e-5e52-415d-bc12-cb9b88782b8f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6b9b73dd-c5f0-4ba1-93e2-4d08fa9e2d00",
                            Email = "mack@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "MACK@EXAMPLE.COM",
                            NormalizedUserName = "MACK@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEIQjp/Nm1QNahK/NySlkUDngYuBb5aY48QJIKiJ6tZ33LC8QIfJuepbEbuDFN4O+4Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f075ee12-ebc2-4ebd-9f6d-2a3e3e1b0df6",
                            TeamId = 5,
                            TwoFactorEnabled = false,
                            UserName = "mack@example.com"
                        },
                        new
                        {
                            Id = "07c46f13-8296-4bef-9860-f0559a355b64",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b5b27b04-b30b-4ad3-832b-34bd3b594515",
                            Email = "rusty@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "RUSTY@EXAMPLE.COM",
                            NormalizedUserName = "RUSTY@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAENJbb4TFIoBbDwXcU7FmmHgAPbQAnqeT5OXUmXo9i6OZUpQ4ZYp0uonRx2XtOX02gA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5c735b1b-1303-4d94-8c26-e57bb4e41080",
                            TeamId = 5,
                            TwoFactorEnabled = false,
                            UserName = "rusty@example.com"
                        },
                        new
                        {
                            Id = "87fbf155-60c1-4e49-a762-e3aa4575a27f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "50b2bdf0-7f19-4ff0-93b9-be57fbcb873f",
                            Email = "dusty@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "DUSTY@EXAMPLE.COM",
                            NormalizedUserName = "DUSTY@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEIrDZJO8ZT0upBcxulClkN8zxl7uQJGkmsc1iXWjy3s9fJAVfTAGBOsCVWg34GyBeg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5da114b9-a5e1-472d-8e33-6a2a5218b87c",
                            TeamId = 5,
                            TwoFactorEnabled = false,
                            UserName = "dusty@example.com"
                        },
                        new
                        {
                            Id = "96633b4c-cb12-41d8-8c04-fdadb59c7964",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "68d1ba45-16ec-4b39-a9e1-b98d0ba6ac33",
                            Email = "banaan@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "BANAAN@EXAMPLE.COM",
                            NormalizedUserName = "BANAAN@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAECaTCXY1/T0ifO/7zMnSxSbfZUxnXt1bGUtAhxAu4VibncGXxQWaUTR7Ndj2Qnq3bw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d280ee9d-6ed1-44bf-925b-da866734b921",
                            TeamId = 6,
                            TwoFactorEnabled = false,
                            UserName = "banaan@example.com"
                        },
                        new
                        {
                            Id = "2b98acb7-6027-4f54-943f-f977ea8b6df6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fa94920e-0f1b-414b-9b85-6ffe74a808bc",
                            Email = "citroen@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "CITROEN@EXAMPLE.COM",
                            NormalizedUserName = "CITROEN@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEKknH5xNi8rNfar0KmtZQb/HdAboEpj97tH9N3L2zaquOHkulloqxRcmVt8k2k7/rQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "668daa9d-0152-4a4d-b105-c5f8a6d78e0e",
                            TeamId = 6,
                            TwoFactorEnabled = false,
                            UserName = "citroen@example.com"
                        },
                        new
                        {
                            Id = "60b05027-c941-40c8-a68e-a004a54b1016",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "99adca0f-3ec3-4135-b9f4-08c63c7f2205",
                            Email = "sinaasappel@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "SINAASAPPEL@EXAMPLE.COM",
                            NormalizedUserName = "SINAASAPPEL@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEApF/FUJKviihkA25qSn+8Bzew3YpJKTWERpj1yNsMBGcCCvBPIUGEXglzAHEU3Wrg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "daeec8e8-f569-476e-9c9d-f0d4b54d6c48",
                            TeamId = 6,
                            TwoFactorEnabled = false,
                            UserName = "sinaasappel@example.com"
                        },
                        new
                        {
                            Id = "9b5b1d0c-1c8a-4f74-bac4-57f1d0e85ef5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "672c9ccc-6f0d-456e-b8cc-8c2ce8bdf9da",
                            Email = "watermeloen@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "WATERMELOEN@EXAMPLE.COM",
                            NormalizedUserName = "WATERMELOEN@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEBq0apSDP12W+EzpEmqdgzof4rIr8KGpTVPtO1qHQW5XnaZOpH5oKOdFacaL3a/+PA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "99843410-6491-4f8c-9f9e-c3b5026ca20f",
                            TeamId = 6,
                            TwoFactorEnabled = false,
                            UserName = "watermeloen@example.com"
                        },
                        new
                        {
                            Id = "a80b61a4-da7a-49c1-a390-c15730c4e794",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f52e486e-c5b0-4590-ad50-c243e2acd7d7",
                            Email = "appel@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "APPEL@EXAMPLE.COM",
                            NormalizedUserName = "APPEL@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAELugvI/7KiNt7x0mwjVXKqHSBPk+CTZrepMXBqRNrGY4WPaUYRGyHG2/wtixjeUSFw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a636f0a5-d37e-45bd-87f1-a2ee15514f75",
                            TeamId = 6,
                            TwoFactorEnabled = false,
                            UserName = "appel@example.com"
                        },
                        new
                        {
                            Id = "f0bd370f-e9bf-4223-b9ea-1b70cb6cb16c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a4c9e56e-6f46-4246-bfde-e4b2e1a4bc78",
                            Email = "peer@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "PEER@EXAMPLE.COM",
                            NormalizedUserName = "PEER@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAENF45GehAFb/aiRKaz6PDXU7Z8+BTHqUfajYQ4ZHqfekjJl4Tl9ZNqhwmob8pslptQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7d9a36c2-5047-499f-8527-28319f7a7d28",
                            TeamId = 6,
                            TwoFactorEnabled = false,
                            UserName = "peer@example.com"
                        },
                        new
                        {
                            Id = "2422bd80-04c4-4bec-8d9f-02e50f676bba",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c6a1469e-4203-4084-ba1c-b28c7e4ca081",
                            Email = "kiwi@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "KIWI@EXAMPLE.COM",
                            NormalizedUserName = "KIWI@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEPoiYzj5WAo6OZuz1t1YNS11+/QFdtptUbR/6ZYeyY+sxqE49uyoeCnnzWYj7gR4UA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "cfca8d75-d3de-405a-b991-0ec3eb4d9797",
                            TeamId = 6,
                            TwoFactorEnabled = false,
                            UserName = "kiwi@example.com"
                        },
                        new
                        {
                            Id = "108eeebb-7eb8-450e-ab15-ae92e1e05849",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "999bc8ad-4589-4fa2-8494-42887c09dcec",
                            Email = "avocado@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "AVOCADO@EXAMPLE.COM",
                            NormalizedUserName = "AVOCADO@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEIyxyxIrUWjwx9wFaVvzg8Z/0wjhq/zJMNrSrs+wkUMc+ofBP0bzduagfsBwh83mZQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b44897d9-0f4a-42c0-a935-77ff5943e281",
                            TeamId = 6,
                            TwoFactorEnabled = false,
                            UserName = "avocado@example.com"
                        },
                        new
                        {
                            Id = "0b180b65-9138-45b3-b844-88cb39d88c40",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "368a1e92-1414-4797-a75a-a53a0321c93b",
                            Email = "waterzwijn@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "WATERZWIJN@EXAMPLE.COM",
                            NormalizedUserName = "WATERZWIJN@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEHxq6sqS4bW5TJPOX6QC2mYyC5p0NSriiya/lxu8RJWJ8vuHvl40+CW6NjSI50YOgw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "291fa7f3-a9f5-4d93-8ee4-5bfe63067526",
                            TeamId = 7,
                            TwoFactorEnabled = false,
                            UserName = "waterzwijn@example.com"
                        },
                        new
                        {
                            Id = "9a718130-42f1-4001-a0cc-0ffe65407ed2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "54209ca1-8281-449c-a838-2393218d4e23",
                            Email = "huiskat@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "HUISKAT@EXAMPLE.COM",
                            NormalizedUserName = "HUISKAT@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEAMr2T5gNGA0JdCvEK4jM/GNPocFGSmb4u2UB0LqnvRnXfkye6lX5eTJR1JqvYQ3xA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "140317fa-acf5-462e-b269-3f0161ca8b55",
                            TeamId = 7,
                            TwoFactorEnabled = false,
                            UserName = "huiskat@example.com"
                        },
                        new
                        {
                            Id = "5efb9286-2103-4ca2-91c1-d612fbfac094",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7ea8b90c-707d-4f7f-905d-0f3bb3be6383",
                            Email = "hyena@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "HYENA@EXAMPLE.COM",
                            NormalizedUserName = "HYENA@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAENBgiYim4/luw/VPORJQX04baegpTqP1XAJpbTQa7800pLaN0zLfU+b385iIkpCZGg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1c6aa81a-07af-4d01-ad30-0b7b5ea9d30e",
                            TeamId = 7,
                            TwoFactorEnabled = false,
                            UserName = "hyena@example.com"
                        });
                });

            modelBuilder.Entity("CTFTournamentPlanner.Models.Round", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BracketId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BracketId");

                    b.ToTable("Rounds");
                });

            modelBuilder.Entity("CTFTournamentPlanner.Models.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Teams");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Gewoon buitenaards goed!",
                            Name = "Planeten"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Wij zijn de betere auto's. Wij rijden niet alleen, wij vliegen naar de overwinning!",
                            Name = "Flip Reset"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Waarom zou je naar de overwinning rennen als je naar de overwinning kunt rijden?",
                            Name = "Auto"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Onze prestaties zijn te allen tijde vlekkeloos!",
                            Name = "Vlekkeloos"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Ka-chow!",
                            Name = "Rusteze"
                        },
                        new
                        {
                            Id = 6,
                            Description = "Zoet of zuur, wij winnen elk uur!",
                            Name = "Fruit"
                        },
                        new
                        {
                            Id = 7,
                            Description = "Wij rennen naar de overwinning!",
                            Name = "Vierpoten"
                        });
                });

            modelBuilder.Entity("MatchupTeam", b =>
                {
                    b.Property<int>("MatchupsId")
                        .HasColumnType("int");

                    b.Property<int>("TeamsId")
                        .HasColumnType("int");

                    b.HasKey("MatchupsId", "TeamsId");

                    b.HasIndex("TeamsId");

                    b.ToTable("MatchupTeam");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "e0f4adb4-8c3d-45ff-a814-62c3c873fba5",
                            Name = "Administrators",
                            NormalizedName = "ADMINISTRATORS"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "372725a0-0897-4dd1-a77a-0f9cce9ca7ad",
                            RoleId = "e0f4adb4-8c3d-45ff-a814-62c3c873fba5"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("BracketTeam", b =>
                {
                    b.HasOne("CTFTournamentPlanner.Models.Bracket", null)
                        .WithMany()
                        .HasForeignKey("BracketsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CTFTournamentPlanner.Models.Team", null)
                        .WithMany()
                        .HasForeignKey("TeamsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CTFTournamentPlanner.Models.Matchup", b =>
                {
                    b.HasOne("CTFTournamentPlanner.Models.Round", "Round")
                        .WithMany("Matchups")
                        .HasForeignKey("RoundId");

                    b.Navigation("Round");
                });

            modelBuilder.Entity("CTFTournamentPlanner.Models.Player", b =>
                {
                    b.HasOne("CTFTournamentPlanner.Models.Team", "Team")
                        .WithMany("Players")
                        .HasForeignKey("TeamId");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("CTFTournamentPlanner.Models.Round", b =>
                {
                    b.HasOne("CTFTournamentPlanner.Models.Bracket", "Bracket")
                        .WithMany("Rounds")
                        .HasForeignKey("BracketId");

                    b.Navigation("Bracket");
                });

            modelBuilder.Entity("MatchupTeam", b =>
                {
                    b.HasOne("CTFTournamentPlanner.Models.Matchup", null)
                        .WithMany()
                        .HasForeignKey("MatchupsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CTFTournamentPlanner.Models.Team", null)
                        .WithMany()
                        .HasForeignKey("TeamsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("CTFTournamentPlanner.Models.Player", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("CTFTournamentPlanner.Models.Player", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CTFTournamentPlanner.Models.Player", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("CTFTournamentPlanner.Models.Player", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CTFTournamentPlanner.Models.Bracket", b =>
                {
                    b.Navigation("Rounds");
                });

            modelBuilder.Entity("CTFTournamentPlanner.Models.Round", b =>
                {
                    b.Navigation("Matchups");
                });

            modelBuilder.Entity("CTFTournamentPlanner.Models.Team", b =>
                {
                    b.Navigation("Players");
                });
#pragma warning restore 612, 618
        }
    }
}
