// <auto-generated />
using System;
using CTFTournamentPlanner.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CTFTournamentPlanner.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20231018152505_MatchupScores0")]
    partial class MatchupScores0
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BracketTeam", b =>
                {
                    b.Property<int>("BracketsId")
                        .HasColumnType("int");

                    b.Property<int>("TeamsId")
                        .HasColumnType("int");

                    b.HasKey("BracketsId", "TeamsId");

                    b.HasIndex("TeamsId");

                    b.ToTable("BracketTeam");
                });

            modelBuilder.Entity("CTFTournamentPlanner.Models.Bracket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsGenerated")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Brackets");
                });

            modelBuilder.Entity("CTFTournamentPlanner.Models.Matchup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("RoundId")
                        .HasColumnType("int");

                    b.Property<int?>("ScoreA")
                        .HasMaxLength(100)
                        .HasColumnType("int");

                    b.Property<int?>("ScoreB")
                        .HasMaxLength(100)
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoundId");

                    b.ToTable("Matchups");
                });

            modelBuilder.Entity("CTFTournamentPlanner.Models.Player", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTeamLeader")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TeamId")
                        .HasColumnType("int");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("TeamId");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "372725a0-0897-4dd1-a77a-0f9cce9ca7ad",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1a7b0e58-ae55-4380-8063-88b9f5bbc59c",
                            Email = "admin@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@EXAMPLE.COM",
                            NormalizedUserName = "ADMIN@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEAK8AP2RzPumq2kDReXbISU2WO9JAEQYRnvtcDNc47zDzV4HsvNI2iUMdutzN5JAkg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ab9ec073-c7c0-413b-8d16-64f70a3cc44b",
                            TwoFactorEnabled = false,
                            UserName = "admin@example.com"
                        },
                        new
                        {
                            Id = "a1ae0194-e00c-471e-afc6-37dfcbe2b15b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f2f1ea21-41a4-4802-ac15-6bd921911336",
                            Email = "aarde@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "AARDE@EXAMPLE.COM",
                            NormalizedUserName = "AARDE@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAENWJ2WgzNinMpZb5nf8/7KRs4EZRXqcdFd1goXptyThfrgJa7rqTu47iPP2Y6p2Gbw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3e70bb3d-f91d-496d-b488-64dbbb809c2a",
                            TeamId = 1,
                            TwoFactorEnabled = false,
                            UserName = "aarde@example.com"
                        },
                        new
                        {
                            Id = "bce7e898-9383-446d-aa84-009b8a1c098f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "363c65a2-8b33-4d67-89d1-df322484b8f8",
                            Email = "mars@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "MARS@EXAMPLE.COM",
                            NormalizedUserName = "MARS@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEAfFCgjOu7bUrxHaYnWdVMA+lnca805o/Vk3w8RXOzuzwflI4wNCXQftkW2qYHA7Wg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "cf2790ac-3ae6-41a0-8ed0-e42543ac5fb9",
                            TeamId = 1,
                            TwoFactorEnabled = false,
                            UserName = "mars@example.com"
                        },
                        new
                        {
                            Id = "062cd23a-919f-4d72-a7a1-3abb0cf36dad",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "193d497e-f7d5-4c3c-8d32-affabe573d6e",
                            Email = "venus@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "VENUS@EXAMPLE.COM",
                            NormalizedUserName = "VENUS@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEFTnbvZmNeA6f9JnQiWgOAqskGKjYMo/J3GxcOLAtmC1hXfw4BlQOaruO9l9nP6xgw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "510c6c23-0a4a-4bef-bd63-2081ada1f9c4",
                            TeamId = 1,
                            TwoFactorEnabled = false,
                            UserName = "venus@example.com"
                        },
                        new
                        {
                            Id = "098cd199-1406-46ed-abef-954a9cbc3f97",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "10ed8b82-8b2c-457e-845a-c5e80eaf5bce",
                            Email = "mercurius@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "MERCURIUS@EXAMPLE.COM",
                            NormalizedUserName = "MERCURIUS@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEEoUoc2wp5we2/LpArXYh3Awt8pzA82pyfSNSuDlbLmQF1j0uC51ROBJmpC6VrrSyA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c5211e73-6fe4-4d63-8e85-29ea8fd6cd31",
                            TeamId = 1,
                            TwoFactorEnabled = false,
                            UserName = "mercurius@example.com"
                        },
                        new
                        {
                            Id = "b073ede7-a17f-42d8-9e28-a397c95dc0d0",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0fac6ed0-9ad5-40fd-ba3b-2fbf42d15d2c",
                            Email = "uranus@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "URANUS@EXAMPLE.COM",
                            NormalizedUserName = "URANUS@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEECN8cfX6I4vw734g4qRPn491SC9aDIlDxdIYx2HVWCdmN/otr3y19FIiesSCimjPw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2693c83a-be70-4ed5-b026-c65bf86cb357",
                            TeamId = 1,
                            TwoFactorEnabled = false,
                            UserName = "uranus@example.com"
                        },
                        new
                        {
                            Id = "1f3316d6-7bea-4e98-8ec9-c18371c9495b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "77f34c86-34ef-4355-8a39-38204e287825",
                            Email = "neptunes@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "NEPTUNES@EXAMPLE.COM",
                            NormalizedUserName = "NEPTUNES@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEDgeDmYTP2IL57JXH7Ohf9cV1yrzwOwvJjaor9BiDZnqPs3/JM5qD7V8E5IzylZ36A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6f76bd25-99e2-4134-8e97-142315b49e5d",
                            TeamId = 1,
                            TwoFactorEnabled = false,
                            UserName = "neptunes@example.com"
                        },
                        new
                        {
                            Id = "977cbe44-b9c4-40bb-930f-58c1e771a82c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "54cd75e4-eecf-46e8-b800-8930925a0e25",
                            Email = "saturnus@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "SATURNUS@EXAMPLE.COM",
                            NormalizedUserName = "SATURNUS@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEK1UTQarDrsjgivim0AippyjCgLKH6w8IKkGIVRAViLqmM6z7I159Ji+0jZXi3npKg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f4406f6d-cc1a-4296-ade5-44e6318aba86",
                            TeamId = 1,
                            TwoFactorEnabled = false,
                            UserName = "saturnus@example.com"
                        },
                        new
                        {
                            Id = "8abdab26-2011-4938-a936-5473d99ae01a",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "96d3dde0-ffaa-4f8f-b06f-36be5690d037",
                            Email = "jupiter@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "JUPITER@EXAMPLE.COM",
                            NormalizedUserName = "JUPITER@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEIVy1/m+n2/3fRAhC2O6Nhf95Y/+khFZY6xtNi+F5aeSLWBwhwlwFACy6lN24yI1og==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2d65baa9-d173-40f0-8c14-6e0d25f24612",
                            TeamId = 1,
                            TwoFactorEnabled = false,
                            UserName = "jupiter@example.com"
                        },
                        new
                        {
                            Id = "bcb02329-321b-4d33-bfa0-ec2c535c4c9c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c9871866-bf80-4b70-827e-809d7bf47103",
                            Email = "octane@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "OCTANE@EXAMPLE.COM",
                            NormalizedUserName = "OCTANE@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAECn6b3OPhSq2n1z495yE3XuJlfUh+xGJwX7S5o9igKSq+XgnelZeAiWwMyr+DYQTkw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f224e418-a578-45e7-a7c8-38968b561968",
                            TeamId = 2,
                            TwoFactorEnabled = false,
                            UserName = "octane@example.com"
                        },
                        new
                        {
                            Id = "27ca2c09-0505-40c5-b405-42bdd3c925cc",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0463add0-ae69-4d1d-9985-c716f191e01e",
                            Email = "breakout@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "BREAKOUT@EXAMPLE.COM",
                            NormalizedUserName = "BREAKOUT@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEEVS+injnyLikUpOoP4lPPLlCuEhsV1KQPB1Cm1WFETTsh5oa5DTABFo47vaSnlLhw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3640c546-6693-43ad-893f-5fb2420ccbbc",
                            TeamId = 2,
                            TwoFactorEnabled = false,
                            UserName = "breakout@example.com"
                        },
                        new
                        {
                            Id = "5a4d47cf-b9f5-4166-90fd-3c94efad9fbd",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "49354541-7aab-4668-b145-680f2df88d4b",
                            Email = "dominus@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "DOMINUS@EXAMPLE.COM",
                            NormalizedUserName = "DOMINUS@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEAqrTFn6OwBLG7lkNyTDI4ZLMAdNL16JXiWAr9W16LH1G1/203pbb1IqvItaE0oeAQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "48f71d16-627f-46cb-b81a-f0c032fb3112",
                            TeamId = 2,
                            TwoFactorEnabled = false,
                            UserName = "dominus@example.com"
                        },
                        new
                        {
                            Id = "c820db91-d221-4aae-8705-044b7b2eed9c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7804afe8-4b48-41c2-9151-d7a326c899e9",
                            Email = "fennec@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "FENNEC@EXAMPLE.COM",
                            NormalizedUserName = "FENNEC@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEEvkKILD4hFqsLRJq7YTh/q7ebeExTBGANBRemwewZ5vYmL2kDQY+pMdx7bo+zu7DA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "36cdbb9a-cd52-4e11-80dc-7f7361423233",
                            TeamId = 2,
                            TwoFactorEnabled = false,
                            UserName = "fennec@example.com"
                        },
                        new
                        {
                            Id = "c1adc070-b391-41a0-a7e5-cea4be876889",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "abb1e5b4-8afb-4f84-999d-1b35cc5ec5ac",
                            Email = "volvo@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "VOLVO@EXAMPLE.COM",
                            NormalizedUserName = "VOLVO@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEAS06tSl1HCYxnYtfPu6CWROLeyo/uRLZqVLKbDz0A7V7aQwi3q4VPys/L09XuR+Jw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "154fc1f0-7c5e-4bae-b722-61416572d1da",
                            TeamId = 3,
                            TwoFactorEnabled = false,
                            UserName = "volvo@example.com"
                        },
                        new
                        {
                            Id = "2580f09b-110a-4e95-a3dc-7c37bcf86d5a",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f95c6006-a64f-49a1-801b-5f32938e12ff",
                            Email = "volkswagen@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "VOLKSWAGEN@EXAMPLE.COM",
                            NormalizedUserName = "VOLKSWAGEN@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEEmjIlkQMRrdJ6E2H7A51HHM3+o6KvKYnNXzsg1IpfVZSqwQ04ma6KiiZiP7CP2lOQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "be24f42f-f499-4a3c-bb98-efc625d7109c",
                            TeamId = 3,
                            TwoFactorEnabled = false,
                            UserName = "volkswagen@example.com"
                        },
                        new
                        {
                            Id = "2322be8d-5e44-42db-887e-79e01e357653",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d9008a27-0521-46d4-aab7-7950f0f4c4b1",
                            Email = "toyota@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "TOYOTA@EXAMPLE.COM",
                            NormalizedUserName = "TOYOTA@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEAnucGNGUF692Iv8uM7a/czE3d1fbDJUrix/XXQedK+KL3fydn0vC6ZTJLyHkFyPFg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "bc77463b-ff0c-4c8d-9485-224fd79249fa",
                            TeamId = 3,
                            TwoFactorEnabled = false,
                            UserName = "toyota@example.com"
                        },
                        new
                        {
                            Id = "7884bd23-28e8-407a-8f3b-52433098cab8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "18fb5586-68a9-476e-9452-10b88de40372",
                            Email = "ferrari@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "FERRARI@EXAMPLE.COM",
                            NormalizedUserName = "FERRARI@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEJd9/J4pFnkBL1guhbtb90B/3+OHu/EIAW+Ls9eDO648pAkUciWA2hKn0cOXCvFPUA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b39361d9-2625-43b7-8082-4b8f3025eeb5",
                            TeamId = 3,
                            TwoFactorEnabled = false,
                            UserName = "ferrari@example.com"
                        },
                        new
                        {
                            Id = "4c517fc5-191e-4e87-9c00-24a57971c961",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "da456aef-6c64-4f62-a8b3-716d3cba9258",
                            Email = "mercedes@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "MERCEDES@EXAMPLE.COM",
                            NormalizedUserName = "MERCEDES@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEDhAVSZrbccvG4mpqrmZBPKxbO86Bzdeg8x5ozrTFYDO6/4iOXgEskC3oij/MZBy9w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3b25c56c-2da0-4606-adb6-b3f7137c2573",
                            TeamId = 3,
                            TwoFactorEnabled = false,
                            UserName = "mercedes@example.com"
                        },
                        new
                        {
                            Id = "e8ad6a74-c1a1-468a-baad-094d3f093f5d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1657ff0c-9285-408b-bda8-b7f0d4e27587",
                            Email = "bruce@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "BRUCE@EXAMPLE.COM",
                            NormalizedUserName = "BRUCE@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEG7hfG5I3YPnEYa+8yqLUo4g2ni8JcpPbNeYvb8fkfx4AXYa1VK78hOV5wqdShJU1A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4e89a17e-78b5-4da7-991a-344be4d6b116",
                            TeamId = 4,
                            TwoFactorEnabled = false,
                            UserName = "bruce@example.com"
                        },
                        new
                        {
                            Id = "9283fef3-1058-4414-aaf6-015857f6abbe",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4d70f582-1b7c-40b1-bfdf-a418a3062753",
                            Email = "mcqueen@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "MCQUEEN@EXAMPLE.COM",
                            NormalizedUserName = "MCQUEEN@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEEK9aVDH/BzUcjYlnmFuF7K/pg5Nk/UqHlfRBEmerCj3kSDskuKQhtzY3L5fJgRwIg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8d092a15-ac30-4c03-aa42-ffc237e3bff1",
                            TeamId = 5,
                            TwoFactorEnabled = false,
                            UserName = "mcqueen@example.com"
                        },
                        new
                        {
                            Id = "b7c81079-1430-4852-bae1-216d7bcfa66b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b14cc127-32c6-4c4e-9ad6-1f44b5acbd83",
                            Email = "mack@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "MACK@EXAMPLE.COM",
                            NormalizedUserName = "MACK@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAECzVrS+scCSVM4D7BFVvLQN9E4yuB3VJ8JmqmEF1IgoQObhZhWZljLb9RVTeQnI3gg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b6baa0f1-99ac-4b22-b311-21f669f4dc4f",
                            TeamId = 5,
                            TwoFactorEnabled = false,
                            UserName = "mack@example.com"
                        },
                        new
                        {
                            Id = "2fdbed7a-8301-43dd-a297-7ca52e92523b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e0c13169-66fe-4cbb-81d1-c73185b309ae",
                            Email = "rusty@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "RUSTY@EXAMPLE.COM",
                            NormalizedUserName = "RUSTY@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEOe+oIq0uJmizyviu0xOIZXlnVKRcA3m3ELUvcaBU5CfAMTN8+wIm21HVtmQnZ/T6w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "586ce260-eba3-464f-8c1d-714c5623bb46",
                            TeamId = 5,
                            TwoFactorEnabled = false,
                            UserName = "rusty@example.com"
                        },
                        new
                        {
                            Id = "bf7c8fb5-ab64-4c86-ac5e-8d06c8c36d29",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c8399478-5a83-4d94-8845-e762703c8f43",
                            Email = "dusty@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "DUSTY@EXAMPLE.COM",
                            NormalizedUserName = "DUSTY@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEL1AIHKFpMbfcugSNCdviF08Y4SwOkfBNbNlZPJAre4I3jLB/kqUD6OHYQfB37H5kA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8a468b73-e4ba-4696-a60f-035c7a954932",
                            TeamId = 5,
                            TwoFactorEnabled = false,
                            UserName = "dusty@example.com"
                        },
                        new
                        {
                            Id = "0e8cb131-4af2-42b6-94a7-4528538e1167",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2d2a9425-1864-40b3-b4b0-6ed400884257",
                            Email = "banaan@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "BANAAN@EXAMPLE.COM",
                            NormalizedUserName = "BANAAN@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEGoLbeCapdOMEvAwHj3RcocW85lcPI7xpuVaGd1DuELo9mJMwq535N9Njt1PFI8V4A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "233a0076-d104-430d-8984-08eb7786b641",
                            TeamId = 6,
                            TwoFactorEnabled = false,
                            UserName = "banaan@example.com"
                        },
                        new
                        {
                            Id = "47f50214-ca02-4ebe-912a-a318c16f4389",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ef7330c6-e5b4-4fcc-a699-9f368a9fc5b6",
                            Email = "citroen@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "CITROEN@EXAMPLE.COM",
                            NormalizedUserName = "CITROEN@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEH4PMqH5xvwH5uahoMx794FKMm3/ZKIMqjYhESwE46nLjahQgoE6Lcbmh07YBNc6hQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b5ab25d0-fdfc-4b71-8c44-2c38edeb1665",
                            TeamId = 6,
                            TwoFactorEnabled = false,
                            UserName = "citroen@example.com"
                        },
                        new
                        {
                            Id = "90b30b62-569d-4bfe-ba71-f8194fe4081c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cf966f8d-883c-47a1-ac27-6b3423711d09",
                            Email = "sinaasappel@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "SINAASAPPEL@EXAMPLE.COM",
                            NormalizedUserName = "SINAASAPPEL@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEO9jxv0FdCnZwYLTPmMzWCKuXX0jDlPcVp7ZBtgQpB6T8HOtzSJSYnWFoqUwah7Psg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "91ad7264-0eae-4e72-bdb3-2cef7ffe9365",
                            TeamId = 6,
                            TwoFactorEnabled = false,
                            UserName = "sinaasappel@example.com"
                        },
                        new
                        {
                            Id = "2c40a631-f8e8-4b58-bcb9-62c22a5d06a3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "30423d8d-12b6-4842-b086-3945187a1971",
                            Email = "watermeloen@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "WATERMELOEN@EXAMPLE.COM",
                            NormalizedUserName = "WATERMELOEN@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEDQt7l2YQwWM0yMqK9Q0cK7Z5YlfwiGlZ0IDY7gfxBeIVTOBaZbLZrUxR7QB18Mg6w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e1a1b5fa-3f6b-451e-b9ee-a5a7da7ca63b",
                            TeamId = 6,
                            TwoFactorEnabled = false,
                            UserName = "watermeloen@example.com"
                        },
                        new
                        {
                            Id = "588cf5c9-10df-4fcf-adc1-dfed275500cd",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e85ad80d-aefb-44a7-901c-ffa07860eeaa",
                            Email = "appel@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "APPEL@EXAMPLE.COM",
                            NormalizedUserName = "APPEL@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEFkL9vwvidwwvUqKJIGzWpkYj26Vmxzbgma7vbrTukfdYdk7AAs69/KZwzTbrxjQ6Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6b8f582c-597e-49cb-99fb-6138b901a5d6",
                            TeamId = 6,
                            TwoFactorEnabled = false,
                            UserName = "appel@example.com"
                        },
                        new
                        {
                            Id = "f6f1b948-0596-47a2-a61f-cd3dd1ec10c2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f9f6eb25-b699-40aa-8aa5-57bf06a00710",
                            Email = "peer@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "PEER@EXAMPLE.COM",
                            NormalizedUserName = "PEER@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAENkWGk/ciXa+DX4swClQPQ14a8EP/jueg+O1/3bsNEJtqJ/M5k8q8Xjv3sUrQ/0yzQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0a1007b0-66ca-4169-966f-6188068aa62b",
                            TeamId = 6,
                            TwoFactorEnabled = false,
                            UserName = "peer@example.com"
                        },
                        new
                        {
                            Id = "57bcaf58-ebb5-437a-8b2b-cdbdb92a143f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "746b4e09-f9df-4232-a3ed-7e4fcbb473bc",
                            Email = "kiwi@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "KIWI@EXAMPLE.COM",
                            NormalizedUserName = "KIWI@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAENFpmQHVvMNuGQKfWq17vamhe/dIz7IubQNJ4IL3DW2A4p8a9lSsB9QcZHzboZ05gw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ed39460d-efdb-40ce-b0f4-cce9130896ff",
                            TeamId = 6,
                            TwoFactorEnabled = false,
                            UserName = "kiwi@example.com"
                        },
                        new
                        {
                            Id = "e6717ff6-b699-4a0d-be01-25892f6031f0",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "28d9a0ae-a2fe-414e-821c-b2b3460a9584",
                            Email = "avocado@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "AVOCADO@EXAMPLE.COM",
                            NormalizedUserName = "AVOCADO@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEPVoZvroBlP2RPt7eWAdNRaPeQhZtbn1oizTbD7ciXw33u7qtdEYgnN8vts2wfztIQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3a8ba38b-a5a1-48d3-a67b-33113eda0aeb",
                            TeamId = 6,
                            TwoFactorEnabled = false,
                            UserName = "avocado@example.com"
                        },
                        new
                        {
                            Id = "7c118277-196b-497b-bb38-d2f1d31831f8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6d73a65b-507b-451f-ae1a-bfca1cbd8b77",
                            Email = "waterzwijn@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "WATERZWIJN@EXAMPLE.COM",
                            NormalizedUserName = "WATERZWIJN@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEMboVYCcAqDpelC14ahrtJC26a0gwIjJcRC5G0M3K6VznvedF4GKEwdYiVRee9Nxuw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "26f83f03-7c45-401f-93b8-dae6ba7cfa38",
                            TeamId = 7,
                            TwoFactorEnabled = false,
                            UserName = "waterzwijn@example.com"
                        },
                        new
                        {
                            Id = "72b56560-7f0b-49c8-824d-bc1e6bb6c74c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2c397db3-d6f9-44dd-b667-aeff9417e391",
                            Email = "huiskat@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "HUISKAT@EXAMPLE.COM",
                            NormalizedUserName = "HUISKAT@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEK9DMTluglhmGwa///u+EoJvnS0HWv34ONVILso08hDRc5r4sehmE1SVtQpto/GQag==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "216f7e9c-d487-4e13-9842-713dbd43c009",
                            TeamId = 7,
                            TwoFactorEnabled = false,
                            UserName = "huiskat@example.com"
                        },
                        new
                        {
                            Id = "13805cec-9446-4ac0-beb2-84ba82ebc4bc",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "07bce25e-c02b-47bc-9adc-33f79d55ab3f",
                            Email = "hyena@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "HYENA@EXAMPLE.COM",
                            NormalizedUserName = "HYENA@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEMK+cShQh+ZeQ9W0MAsT+KvQlr90RJPqvd46q4FOpG8FOFI9rnXkHFkpMnfIX49R2A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "18885ef3-53bd-47c1-bf5e-8a37e4f2c9d2",
                            TeamId = 7,
                            TwoFactorEnabled = false,
                            UserName = "hyena@example.com"
                        });
                });

            modelBuilder.Entity("CTFTournamentPlanner.Models.Round", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BracketId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BracketId");

                    b.ToTable("Rounds");
                });

            modelBuilder.Entity("CTFTournamentPlanner.Models.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Teams");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Gewoon buitenaards goed!",
                            Name = "Planeten"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Wij zijn de betere auto's. Wij rijden niet alleen, wij vliegen naar de overwinning!",
                            Name = "Flip Reset"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Waarom zou je naar de overwinning rennen als je naar de overwinning kunt rijden?",
                            Name = "Auto"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Onze prestaties zijn te allen tijde vlekkeloos!",
                            Name = "Vlekkeloos"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Ka-chow!",
                            Name = "Rusteze"
                        },
                        new
                        {
                            Id = 6,
                            Description = "Zoet of zuur, wij winnen elk uur!",
                            Name = "Fruit"
                        },
                        new
                        {
                            Id = 7,
                            Description = "Wij rennen naar de overwinning!",
                            Name = "Vierpoten"
                        });
                });

            modelBuilder.Entity("MatchupTeam", b =>
                {
                    b.Property<int>("MatchupsId")
                        .HasColumnType("int");

                    b.Property<int>("TeamsId")
                        .HasColumnType("int");

                    b.HasKey("MatchupsId", "TeamsId");

                    b.HasIndex("TeamsId");

                    b.ToTable("MatchupTeam");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "e0f4adb4-8c3d-45ff-a814-62c3c873fba5",
                            Name = "Administrators",
                            NormalizedName = "ADMINISTRATORS"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "372725a0-0897-4dd1-a77a-0f9cce9ca7ad",
                            RoleId = "e0f4adb4-8c3d-45ff-a814-62c3c873fba5"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("BracketTeam", b =>
                {
                    b.HasOne("CTFTournamentPlanner.Models.Bracket", null)
                        .WithMany()
                        .HasForeignKey("BracketsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CTFTournamentPlanner.Models.Team", null)
                        .WithMany()
                        .HasForeignKey("TeamsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CTFTournamentPlanner.Models.Matchup", b =>
                {
                    b.HasOne("CTFTournamentPlanner.Models.Round", null)
                        .WithMany("Matchups")
                        .HasForeignKey("RoundId");
                });

            modelBuilder.Entity("CTFTournamentPlanner.Models.Player", b =>
                {
                    b.HasOne("CTFTournamentPlanner.Models.Team", "Team")
                        .WithMany("Players")
                        .HasForeignKey("TeamId");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("CTFTournamentPlanner.Models.Round", b =>
                {
                    b.HasOne("CTFTournamentPlanner.Models.Bracket", null)
                        .WithMany("Rounds")
                        .HasForeignKey("BracketId");
                });

            modelBuilder.Entity("MatchupTeam", b =>
                {
                    b.HasOne("CTFTournamentPlanner.Models.Matchup", null)
                        .WithMany()
                        .HasForeignKey("MatchupsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CTFTournamentPlanner.Models.Team", null)
                        .WithMany()
                        .HasForeignKey("TeamsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("CTFTournamentPlanner.Models.Player", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("CTFTournamentPlanner.Models.Player", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CTFTournamentPlanner.Models.Player", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("CTFTournamentPlanner.Models.Player", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CTFTournamentPlanner.Models.Bracket", b =>
                {
                    b.Navigation("Rounds");
                });

            modelBuilder.Entity("CTFTournamentPlanner.Models.Round", b =>
                {
                    b.Navigation("Matchups");
                });

            modelBuilder.Entity("CTFTournamentPlanner.Models.Team", b =>
                {
                    b.Navigation("Players");
                });
#pragma warning restore 612, 618
        }
    }
}
