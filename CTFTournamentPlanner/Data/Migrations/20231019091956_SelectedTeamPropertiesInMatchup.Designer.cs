// <auto-generated />
using System;
using CTFTournamentPlanner.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CTFTournamentPlanner.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20231019091956_SelectedTeamPropertiesInMatchup")]
    partial class SelectedTeamPropertiesInMatchup
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BracketTeam", b =>
                {
                    b.Property<int>("BracketsId")
                        .HasColumnType("int");

                    b.Property<int>("TeamsId")
                        .HasColumnType("int");

                    b.HasKey("BracketsId", "TeamsId");

                    b.HasIndex("TeamsId");

                    b.ToTable("BracketTeam");
                });

            modelBuilder.Entity("CTFTournamentPlanner.Models.Bracket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsGenerated")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Brackets");
                });

            modelBuilder.Entity("CTFTournamentPlanner.Models.Matchup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("RoundId")
                        .HasColumnType("int");

                    b.Property<int?>("ScoreA")
                        .HasMaxLength(100)
                        .HasColumnType("int");

                    b.Property<int?>("ScoreB")
                        .HasMaxLength(100)
                        .HasColumnType("int");

                    b.Property<int?>("SelectedTeamAId")
                        .HasColumnType("int");

                    b.Property<int?>("SelectedTeamBId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoundId");

                    b.ToTable("Matchups");
                });

            modelBuilder.Entity("CTFTournamentPlanner.Models.Player", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTeamLeader")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TeamId")
                        .HasColumnType("int");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("TeamId");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "372725a0-0897-4dd1-a77a-0f9cce9ca7ad",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e6ef40d1-fe08-45e7-bbd8-32d4b3f0f94f",
                            Email = "admin@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@EXAMPLE.COM",
                            NormalizedUserName = "ADMIN@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEMaRXbo8tPjRUsZd8OAi3s8k5Ra8j9a8H6sqBNRjVirexHsZYsbExvBoF48GAN0cng==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "893c17c9-cff5-404f-97da-f6e83b59fbab",
                            TwoFactorEnabled = false,
                            UserName = "admin@example.com"
                        },
                        new
                        {
                            Id = "4df4c77c-b17b-4004-8313-0f6186197a91",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3dcd9c88-8d4f-4d83-b64e-2fc176043be6",
                            Email = "aarde@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "AARDE@EXAMPLE.COM",
                            NormalizedUserName = "AARDE@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEKY87Y+GNiS5R8N2xHXCm3sZnbiLGBp1gimHIxwK4vcfX4tHTN5ZEEb0UAO3QeBwrw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c0731370-6d2d-4753-abc3-58a6ebc15bb8",
                            TeamId = 1,
                            TwoFactorEnabled = false,
                            UserName = "aarde@example.com"
                        },
                        new
                        {
                            Id = "5cf817ed-761d-45fa-8dc7-9006f340f073",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b2608a56-784f-4c05-b4ba-c5b5807ef8c7",
                            Email = "mars@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "MARS@EXAMPLE.COM",
                            NormalizedUserName = "MARS@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEFGEIF+A3YKU55xKqdchoNRhysRdnyTj+nb0wpNKcVhmsj0YHy8V1iUE/JfDK3zUrA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6490be31-2ec0-4453-ae12-99746807390d",
                            TeamId = 1,
                            TwoFactorEnabled = false,
                            UserName = "mars@example.com"
                        },
                        new
                        {
                            Id = "8053d965-61fd-41b7-b4c3-8f4781a7a593",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "deeaf13f-99c8-4b8c-90e4-2952e3ab7e9c",
                            Email = "venus@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "VENUS@EXAMPLE.COM",
                            NormalizedUserName = "VENUS@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEGaJ8RAdBoSZlV2SomxDF+uzu725ZhxsE46ArN3u6M3BYGnYAaqY4fzzUHrDPd5dkw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "508360af-e8b8-471b-b401-aaf2de11322a",
                            TeamId = 1,
                            TwoFactorEnabled = false,
                            UserName = "venus@example.com"
                        },
                        new
                        {
                            Id = "e51c7525-89e1-4844-8c0c-9cadefa30f0d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "864e7626-18de-4249-a87d-0755d6d2b5dd",
                            Email = "mercurius@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "MERCURIUS@EXAMPLE.COM",
                            NormalizedUserName = "MERCURIUS@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEH+3I/C/ep5Yyl3VHpxP4cRqsP5u+7qxpi4W2fcb0ci7ou7fhVQ9xaf97TaX1wkz9A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d51b7143-fa13-4673-af58-a7ec5fbcf726",
                            TeamId = 1,
                            TwoFactorEnabled = false,
                            UserName = "mercurius@example.com"
                        },
                        new
                        {
                            Id = "c3f22d07-2738-4350-9e31-08479b25cec3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "97db1aa9-552a-4b78-9ad4-57d4c11e200e",
                            Email = "uranus@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "URANUS@EXAMPLE.COM",
                            NormalizedUserName = "URANUS@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAENXiKzucKNsCEAFeMgy7basE45inl4JIIVGIVAUU/GkDAOlxiOnxMvfWm5aK9tkXXg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f0f05c68-9e2e-4f04-a33f-ce4d280ae8c0",
                            TeamId = 1,
                            TwoFactorEnabled = false,
                            UserName = "uranus@example.com"
                        },
                        new
                        {
                            Id = "86342fd1-a45f-40f1-b9de-c0d2e7b82943",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c903a447-f635-4ef1-81fa-cdbddb818ca2",
                            Email = "neptunes@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "NEPTUNES@EXAMPLE.COM",
                            NormalizedUserName = "NEPTUNES@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEENbXebTDOi45cCTzV+XYNT+v5x2bYTNypviAKEOxpr4rcFJ0kp76QWNE+Dmvdx8Mg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "be74c50c-f7d7-4c80-af88-fcc2bcb15391",
                            TeamId = 1,
                            TwoFactorEnabled = false,
                            UserName = "neptunes@example.com"
                        },
                        new
                        {
                            Id = "62ab27ff-6f66-4365-9322-991dfd9883ff",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4288ceb0-4686-450d-a4c5-232f7a5cd9a1",
                            Email = "saturnus@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "SATURNUS@EXAMPLE.COM",
                            NormalizedUserName = "SATURNUS@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEKV0S406Wxnmq4MG62Lk+/M0jKHznkWiHWu+yiyuhHXavEq8SQnVI1TODgxOCvgJ+A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1340fe23-ba74-48dd-9363-b27be79366cf",
                            TeamId = 1,
                            TwoFactorEnabled = false,
                            UserName = "saturnus@example.com"
                        },
                        new
                        {
                            Id = "85616ac6-cf3c-40bb-931e-96129345323a",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c0fa0df3-fe05-44e7-961a-e5789a0750e6",
                            Email = "jupiter@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "JUPITER@EXAMPLE.COM",
                            NormalizedUserName = "JUPITER@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEHg6djFcbTzwTjU2MVvcSmNxj0aCACqrUQUnQuQRnv9LNMXeU5kp9l2VCfYwVEFYtg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f4289ac5-ca8a-4ab8-ad5e-a463aa4a926c",
                            TeamId = 1,
                            TwoFactorEnabled = false,
                            UserName = "jupiter@example.com"
                        },
                        new
                        {
                            Id = "0a46404e-c572-4fa6-bd56-6b50f3c905ce",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3afc186a-2ad5-4b69-9adf-cb29b0e52f11",
                            Email = "octane@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "OCTANE@EXAMPLE.COM",
                            NormalizedUserName = "OCTANE@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEKfuXnSmIMLmjYWbTpmT6rxH1/7VOmNT98aAAmrQ/5IB85J5fWDgHXP5u+OOX/RDeg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d8155d17-a793-424f-8c2a-8f6d308bb0c6",
                            TeamId = 2,
                            TwoFactorEnabled = false,
                            UserName = "octane@example.com"
                        },
                        new
                        {
                            Id = "8235138c-558a-453e-8fba-6b74e1aefa66",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "11af4e6a-0b1d-436e-abfd-beabb417a7b5",
                            Email = "breakout@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "BREAKOUT@EXAMPLE.COM",
                            NormalizedUserName = "BREAKOUT@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEAeGPOyibsalts62ugp/PuWd6GDOJ13nCde8fiaY7hYTxKzF9pTIwTMvqJ3arXXN4w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8d098367-ef0a-4c8d-b437-d6f3fd6db8cd",
                            TeamId = 2,
                            TwoFactorEnabled = false,
                            UserName = "breakout@example.com"
                        },
                        new
                        {
                            Id = "0b3b3c4e-87bf-4de8-a2f2-c119041731ac",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4f3f0392-d3d3-43fa-941c-c4a464288144",
                            Email = "dominus@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "DOMINUS@EXAMPLE.COM",
                            NormalizedUserName = "DOMINUS@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAECivvjfGNjIdGO7JGDTBi7J9wDuBbKpjXBSK5M+B2InEGaiZyqDUf5b8+vFVtKr+7Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d572fd21-5d46-4f5f-9294-34bea280b8ee",
                            TeamId = 2,
                            TwoFactorEnabled = false,
                            UserName = "dominus@example.com"
                        },
                        new
                        {
                            Id = "24923f4f-28d2-4d33-b591-fd62eff4ec0b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cf9ef788-c855-45cb-b8ff-9c6336c8ba2a",
                            Email = "fennec@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "FENNEC@EXAMPLE.COM",
                            NormalizedUserName = "FENNEC@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEC8y+/9mGrBPPTyWIJFRQF9w8IIlyyt9rxQZufPw3rkXT76hwIK1SgdAETuL2MB6Ug==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8ea8918a-d082-4a1e-a27c-e11eeb674a3a",
                            TeamId = 2,
                            TwoFactorEnabled = false,
                            UserName = "fennec@example.com"
                        },
                        new
                        {
                            Id = "df23c1cf-bf3e-4b97-990f-2aa09dc245d3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8a56525a-1377-456c-b0c7-c5db86e645b3",
                            Email = "volvo@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "VOLVO@EXAMPLE.COM",
                            NormalizedUserName = "VOLVO@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEIbi8M6IvX/cLl8iOTJuMsLo2dYETazARCsDXHudggpW2I5M23wlFDDNk4JNU5xm+Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "bf9af943-61d2-4688-bea3-1c8ede9dc3b7",
                            TeamId = 3,
                            TwoFactorEnabled = false,
                            UserName = "volvo@example.com"
                        },
                        new
                        {
                            Id = "d9f1bd6f-d22b-4895-8a41-84f85861e87b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "843797d7-bdec-4839-9842-112eaf408b14",
                            Email = "volkswagen@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "VOLKSWAGEN@EXAMPLE.COM",
                            NormalizedUserName = "VOLKSWAGEN@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEHwjqPwDVwJ4HYh9RZ2/qz2WMeutKCnRARpfkyMlmi1XJZ+BgmRvj/Ju+o7zeoE0Iw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d6ec2824-e743-4879-900d-a4ce9633a6fa",
                            TeamId = 3,
                            TwoFactorEnabled = false,
                            UserName = "volkswagen@example.com"
                        },
                        new
                        {
                            Id = "e51e9790-755f-401d-a35d-295f925b5163",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0eea0b5d-1a08-4b42-bb2f-6960c8216f4d",
                            Email = "toyota@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "TOYOTA@EXAMPLE.COM",
                            NormalizedUserName = "TOYOTA@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAELyuzK5N9ZIR/v3ZhQId11CHTxn7yKgnOAYkaAJw0OP3QzdIkDOdD8pOohSqiSvllA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "278124f6-6440-4c17-a340-913b574b92d6",
                            TeamId = 3,
                            TwoFactorEnabled = false,
                            UserName = "toyota@example.com"
                        },
                        new
                        {
                            Id = "f5a78858-eb70-4250-852b-573ba2bcf7a6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a8b90f7e-a930-46fc-9b34-d032ca8620cf",
                            Email = "ferrari@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "FERRARI@EXAMPLE.COM",
                            NormalizedUserName = "FERRARI@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEG5j/OC9hrAT5QC8jHqfiYCSkUfH5iLgX8hmG2a4GJ37qY4DbmOpxaUHoGXCzhd45g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5ca4582a-a41a-47f0-aed5-b37e13b186f4",
                            TeamId = 3,
                            TwoFactorEnabled = false,
                            UserName = "ferrari@example.com"
                        },
                        new
                        {
                            Id = "8b2c9220-0d9d-4c1b-8fb3-5ff1b39b2065",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8659c641-5077-4237-a3b9-983d3ea15326",
                            Email = "mercedes@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "MERCEDES@EXAMPLE.COM",
                            NormalizedUserName = "MERCEDES@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAENzqxt5fZCacmy8x7/zX8yfdebqZw4h936vM18r2MWdHAZfAxuRktYOyNoqpcAP5hg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4f171008-0f07-484f-a0e3-ef8b63a55153",
                            TeamId = 3,
                            TwoFactorEnabled = false,
                            UserName = "mercedes@example.com"
                        },
                        new
                        {
                            Id = "2d6017ee-4cec-4193-b22f-9f0476766d6c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1f262013-a96d-493a-98c0-ecc187fd8622",
                            Email = "bruce@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "BRUCE@EXAMPLE.COM",
                            NormalizedUserName = "BRUCE@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEH6M1DjMs5meZctUaKNw7UTK/3dXj36yxk38VWrKqTIf79nEJsW07vtmn9U5+eRf2w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ce973be7-b92d-4b95-b196-3ca6cfb44969",
                            TeamId = 4,
                            TwoFactorEnabled = false,
                            UserName = "bruce@example.com"
                        },
                        new
                        {
                            Id = "8afc4855-e9a5-4388-b333-791f8874e653",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "911bf4e4-6f9b-4212-8426-9c3f53e62eba",
                            Email = "mcqueen@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "MCQUEEN@EXAMPLE.COM",
                            NormalizedUserName = "MCQUEEN@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEGtp+OTUK6Wr+lrrM84TOPLxqiDvY46L9PQQlkm2bk6DazI7VVLipNIixOAjfWsiag==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "625f7bde-4c3f-44cb-9408-30c947033b08",
                            TeamId = 5,
                            TwoFactorEnabled = false,
                            UserName = "mcqueen@example.com"
                        },
                        new
                        {
                            Id = "77f8ae78-85ca-4fb8-af48-a1ee30db55e4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "03cc3a13-1b2d-4c83-a7f3-b3682acfba51",
                            Email = "mack@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "MACK@EXAMPLE.COM",
                            NormalizedUserName = "MACK@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEDvp3x9jHFpOGFJKBE6Q8hH3sa7MO9a24ReMn86ZwC0gxSBhBlvrICEzqabqoTez+g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "14192a79-ddef-44ec-bf6d-5ab701bc6cbd",
                            TeamId = 5,
                            TwoFactorEnabled = false,
                            UserName = "mack@example.com"
                        },
                        new
                        {
                            Id = "0b1b1fc6-336c-4696-9bce-eb6ea121411c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6de2368c-c12b-4ce7-91b6-4c589775079e",
                            Email = "rusty@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "RUSTY@EXAMPLE.COM",
                            NormalizedUserName = "RUSTY@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEEj/QziA7+Yv6GPg9dmqe3h6y0SoViHpeDRUbKBA9MtQXGVPfaacuHJxRO4IDGobFg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8d126cb7-fe55-4752-a53a-dee7433c91e1",
                            TeamId = 5,
                            TwoFactorEnabled = false,
                            UserName = "rusty@example.com"
                        },
                        new
                        {
                            Id = "ec3a55ae-9170-4046-9245-1ef8a3e69b6f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3421e05b-6a67-4432-a992-6eb8681be1e7",
                            Email = "dusty@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "DUSTY@EXAMPLE.COM",
                            NormalizedUserName = "DUSTY@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAELtNclygUAfv3IqpD21bFknsmuAydIjo540VrbLzXsEsEmvz59MIiwSYFPLkBGMG6w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "acf02061-60b5-44c0-abad-4c065dd01263",
                            TeamId = 5,
                            TwoFactorEnabled = false,
                            UserName = "dusty@example.com"
                        },
                        new
                        {
                            Id = "fc2b8738-7288-40b3-a0b3-384a61f368a8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "188e655a-0771-4c7f-baaf-576c9dea3ab6",
                            Email = "banaan@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "BANAAN@EXAMPLE.COM",
                            NormalizedUserName = "BANAAN@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEIAfGxF/iPFvb9USQQIcWVXy6ZYrJkmtm6zrvuRQApANgxlpAZSVgVvT4yVOHL9rxQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "00e37568-619f-45ac-b15e-c4a5f6d5e378",
                            TeamId = 6,
                            TwoFactorEnabled = false,
                            UserName = "banaan@example.com"
                        },
                        new
                        {
                            Id = "9cf4c124-2484-470b-8d73-c262b81e4a3a",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9c145e78-6c27-45e6-bb9f-25bffc594346",
                            Email = "citroen@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "CITROEN@EXAMPLE.COM",
                            NormalizedUserName = "CITROEN@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEOH1gx0InptmLDKq3iFCc+7us8Z1lmhcnF4T/IZpUmdRbJeeVagaiaY6foM0PckRPg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "bfad0833-2c18-4e21-9a86-cd8467cebc13",
                            TeamId = 6,
                            TwoFactorEnabled = false,
                            UserName = "citroen@example.com"
                        },
                        new
                        {
                            Id = "b8d64d7f-50da-4a29-addb-3a85f9ad88f8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "763424ae-df04-475a-91f6-da7b25943b70",
                            Email = "sinaasappel@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "SINAASAPPEL@EXAMPLE.COM",
                            NormalizedUserName = "SINAASAPPEL@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAECDzp6P3aWVyKPZzCCHSswNyks+o+aCH1lxEYYvu2fg4Pa5OGFvGEk3a5dSN+mchRg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ee465de7-da79-4fdb-a7c3-261b1c5c29a3",
                            TeamId = 6,
                            TwoFactorEnabled = false,
                            UserName = "sinaasappel@example.com"
                        },
                        new
                        {
                            Id = "6819b530-01d3-4dbb-8b00-8bc9a62b47f6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a5851098-c5dd-4e51-b557-72869446fc88",
                            Email = "watermeloen@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "WATERMELOEN@EXAMPLE.COM",
                            NormalizedUserName = "WATERMELOEN@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEDTDgQsPGTTj9sq4VWcrNhQ7dr3mdbjGEyfismcID92Y8UlKHRyx815UfkKAr6sHJw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "34c2c50c-46a2-495a-9d84-9641922a4401",
                            TeamId = 6,
                            TwoFactorEnabled = false,
                            UserName = "watermeloen@example.com"
                        },
                        new
                        {
                            Id = "0efbaefc-8f42-48d5-b7d4-1dc48856c553",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1c7015d2-f38c-49d3-b4c9-71e1ded72a19",
                            Email = "appel@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "APPEL@EXAMPLE.COM",
                            NormalizedUserName = "APPEL@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEJpQyv4zvXSc9EUdUCTQYVuktTlZZ515KRWM+yi4RQXK4/HjH6RJmqmIGHgCPAT8Pg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "937a31f0-6aea-4c48-809e-bca46e53c2d8",
                            TeamId = 6,
                            TwoFactorEnabled = false,
                            UserName = "appel@example.com"
                        },
                        new
                        {
                            Id = "2fd8b3ba-3639-4796-a2e7-a2b5a01c7c62",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "612e4203-4cab-4ee3-9bad-ad35eb51ee01",
                            Email = "peer@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "PEER@EXAMPLE.COM",
                            NormalizedUserName = "PEER@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEBNfq+LQ7NctnqD5xOEIeHmZ0Tqn/bKHJn10MU7Sg9cFAflqzoDpE2faTHQPr7nnFw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "50557e96-426c-4312-8a4c-1fe97c0e1877",
                            TeamId = 6,
                            TwoFactorEnabled = false,
                            UserName = "peer@example.com"
                        },
                        new
                        {
                            Id = "fc8aee3c-30ce-4718-83b1-48622109c7f3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e42e6135-4c25-44a8-b55a-784c1069408c",
                            Email = "kiwi@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "KIWI@EXAMPLE.COM",
                            NormalizedUserName = "KIWI@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEIvFvYJxlvFsXeMAszKikgtTWCRyKvgjZhj/pBJ9+uVlRHyRgMl4ND3aX3Z13ATfOA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4cd51ad5-64c4-4932-8880-ed3c2b5292f1",
                            TeamId = 6,
                            TwoFactorEnabled = false,
                            UserName = "kiwi@example.com"
                        },
                        new
                        {
                            Id = "4377849e-17ec-40b0-b9e0-5829cd20f99b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e28e240c-5230-40ef-80be-7e6d7dc66a87",
                            Email = "avocado@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "AVOCADO@EXAMPLE.COM",
                            NormalizedUserName = "AVOCADO@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAELDY43NTgRG+knmrmnmI+sf0T/JE8NBPJh5YVFNavROeu804M5kryyZPsfnF39XVyg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b1eb8936-9871-49f1-8058-a9d0260396cb",
                            TeamId = 6,
                            TwoFactorEnabled = false,
                            UserName = "avocado@example.com"
                        },
                        new
                        {
                            Id = "086fe6d2-a294-4856-a877-fcad0670d1c4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4d274a18-d315-4d85-8f93-6faaed1912a0",
                            Email = "waterzwijn@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "WATERZWIJN@EXAMPLE.COM",
                            NormalizedUserName = "WATERZWIJN@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAED1me9eex40/dRQnGyP8nh0HbDABx4Z30DsV2NZNwvQ27rcmqGsku5HOoS7zJvHdjQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "20792246-a99b-4bdb-9c81-6948d31388c8",
                            TeamId = 7,
                            TwoFactorEnabled = false,
                            UserName = "waterzwijn@example.com"
                        },
                        new
                        {
                            Id = "681bbf2e-5b68-4275-a863-b120c6ef85bc",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "06b90db1-157c-4b32-b767-9f44bfdbedcb",
                            Email = "huiskat@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "HUISKAT@EXAMPLE.COM",
                            NormalizedUserName = "HUISKAT@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEFdy0npP7Fwyi1r0B2mAGGi4a378sAVf6dFhkmoEEmLYdYTaliErBk5BQ7xULsORUw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "bc0bb646-5177-48fa-9ee7-823047cb2fb8",
                            TeamId = 7,
                            TwoFactorEnabled = false,
                            UserName = "huiskat@example.com"
                        },
                        new
                        {
                            Id = "b3066c92-7ac9-4d89-b21b-4c395b54e2ab",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5af3098a-b37f-4880-88eb-dc36922082c4",
                            Email = "hyena@example.com",
                            EmailConfirmed = false,
                            IsTeamLeader = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "HYENA@EXAMPLE.COM",
                            NormalizedUserName = "HYENA@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEFj4GrnuEK/47r4JFX03RTtv0MafJP7amLiguHrEyviBRSm9UaUU7+4vpFeAh9XboQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "37799397-72b1-4628-abeb-0e64f14dd593",
                            TeamId = 7,
                            TwoFactorEnabled = false,
                            UserName = "hyena@example.com"
                        });
                });

            modelBuilder.Entity("CTFTournamentPlanner.Models.Round", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BracketId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BracketId");

                    b.ToTable("Rounds");
                });

            modelBuilder.Entity("CTFTournamentPlanner.Models.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Teams");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Gewoon buitenaards goed!",
                            Name = "Planeten"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Wij zijn de betere auto's. Wij rijden niet alleen, wij vliegen naar de overwinning!",
                            Name = "Flip Reset"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Waarom zou je naar de overwinning rennen als je naar de overwinning kunt rijden?",
                            Name = "Auto"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Onze prestaties zijn te allen tijde vlekkeloos!",
                            Name = "Vlekkeloos"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Ka-chow!",
                            Name = "Rusteze"
                        },
                        new
                        {
                            Id = 6,
                            Description = "Zoet of zuur, wij winnen elk uur!",
                            Name = "Fruit"
                        },
                        new
                        {
                            Id = 7,
                            Description = "Wij rennen naar de overwinning!",
                            Name = "Vierpoten"
                        });
                });

            modelBuilder.Entity("MatchupTeam", b =>
                {
                    b.Property<int>("MatchupsId")
                        .HasColumnType("int");

                    b.Property<int>("TeamsId")
                        .HasColumnType("int");

                    b.HasKey("MatchupsId", "TeamsId");

                    b.HasIndex("TeamsId");

                    b.ToTable("MatchupTeam");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "e0f4adb4-8c3d-45ff-a814-62c3c873fba5",
                            Name = "Administrators",
                            NormalizedName = "ADMINISTRATORS"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "372725a0-0897-4dd1-a77a-0f9cce9ca7ad",
                            RoleId = "e0f4adb4-8c3d-45ff-a814-62c3c873fba5"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("BracketTeam", b =>
                {
                    b.HasOne("CTFTournamentPlanner.Models.Bracket", null)
                        .WithMany()
                        .HasForeignKey("BracketsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CTFTournamentPlanner.Models.Team", null)
                        .WithMany()
                        .HasForeignKey("TeamsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CTFTournamentPlanner.Models.Matchup", b =>
                {
                    b.HasOne("CTFTournamentPlanner.Models.Round", "Round")
                        .WithMany("Matchups")
                        .HasForeignKey("RoundId");

                    b.Navigation("Round");
                });

            modelBuilder.Entity("CTFTournamentPlanner.Models.Player", b =>
                {
                    b.HasOne("CTFTournamentPlanner.Models.Team", "Team")
                        .WithMany("Players")
                        .HasForeignKey("TeamId");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("CTFTournamentPlanner.Models.Round", b =>
                {
                    b.HasOne("CTFTournamentPlanner.Models.Bracket", "Bracket")
                        .WithMany("Rounds")
                        .HasForeignKey("BracketId");

                    b.Navigation("Bracket");
                });

            modelBuilder.Entity("MatchupTeam", b =>
                {
                    b.HasOne("CTFTournamentPlanner.Models.Matchup", null)
                        .WithMany()
                        .HasForeignKey("MatchupsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CTFTournamentPlanner.Models.Team", null)
                        .WithMany()
                        .HasForeignKey("TeamsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("CTFTournamentPlanner.Models.Player", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("CTFTournamentPlanner.Models.Player", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CTFTournamentPlanner.Models.Player", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("CTFTournamentPlanner.Models.Player", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CTFTournamentPlanner.Models.Bracket", b =>
                {
                    b.Navigation("Rounds");
                });

            modelBuilder.Entity("CTFTournamentPlanner.Models.Round", b =>
                {
                    b.Navigation("Matchups");
                });

            modelBuilder.Entity("CTFTournamentPlanner.Models.Team", b =>
                {
                    b.Navigation("Players");
                });
#pragma warning restore 612, 618
        }
    }
}
